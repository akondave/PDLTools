/**

@page installpage

## Getting PDL Tools

The latest GPPKG version of the PDL Tools library can be found here: 
 - <A HREF="gppkg/pdltools-@PDLTOOLS_VERSION_STRING@-gpdb4.2-rhel5-x86_64.gppkg">PDL Tools @PDLTOOLS_VERSION_STRING@ GPPKG for GPDB 4.2</A HREF>
 - <A HREF="gppkg/pdltools-@PDLTOOLS_VERSION_STRING@-gpdb4.3-rhel5-x86_64.gppkg">PDL Tools @PDLTOOLS_VERSION_STRING@ GPPKG for GPDB 4.3</A HREF>
 - <A HREF="gppkg/pdltools-@PDLTOOLS_VERSION_STRING@-hawq1.3-rhel5-x86_64.gppkg">PDL Tools @PDLTOOLS_VERSION_STRING@ GPPKG for HAWQ 1.3</A HREF>

Alternatively, PDL Tools can be installed from its RPM:
 - <A HREF="rpm/pdltools-@PDLTOOLS_VERSION_STRING@-gpdb4.2-Linux.rpm">PDL Tools @PDLTOOLS_VERSION_STRING@ RPM for GPDB 4.2</A HREF>
 - <A HREF="rpm/pdltools-@PDLTOOLS_VERSION_STRING@-gpdb4.3-Linux.rpm">PDL Tools @PDLTOOLS_VERSION_STRING@ RPM for GPDB 4.3</A HREF>
 - <A HREF="rpm/pdltools-@PDLTOOLS_VERSION_STRING@-hawq1.2-Linux.rpm">PDL Tools @PDLTOOLS_VERSION_STRING@ RPM for HAWQ 1.2</A HREF>
 - <A HREF="rpm/pdltools-@PDLTOOLS_VERSION_STRING@-hawq1.3-Linux.rpm">PDL Tools @PDLTOOLS_VERSION_STRING@ RPM for HAWQ 1.3</A HREF>

Note that HAWQ 1.2 does not support GPPKG installation, for which reason only
RPMs are available for it. Because of features not supported in HAWQ
(both 1.2 and 1.3), some parts of PDL Tools available in GPDB are not
available in HAWQ.

An installation script for PDL Tools on HAWQ 1.2 is available here:
 - <A HREF="scripts/hawq_install">PDL Tools HAWQ Install Script</A>.

This documentation is also available as an
<A HREF="manual/pdltools-@PDLTOOLS_VERSION_STRING@-manual.tgz">HTML tar ball</A>
and as a
<A HREF="manual/pdltools-@PDLTOOLS_VERSION_STRING@-manual.pdf">PDF</A> file,
for it to be installed together with the library and available when using it.
____

## Installing PDL Tools on GPDB

### Prerequisites

PDL Tools should be installed on a GPDB 4.2 or 4.3. It requires `PL/pgSQL`, `PL/C`, `PL/Python` and `PL/Perl`.
The `Python` version should be at least 2.6, and the `Perl` version should be at least 5.008 but lower than 6.0.

<pre class="example">
gppkg -i pdltools-@PDLTOOLS_VERSION_STRING@-gpdb4.3-rhel5-x86_64.gppkg
</pre>

For GPDB 4.3 or the equivalent for GPDB 4.2. Run this as gpadmin.

@verbatim
$ gppkg -i pdltools-@PDLTOOLS_VERSION_STRING@-gpdb4.3-rhel5-x86_64.gppkg
20140826:07:05:22:015733 gppkg:localhost:gpadmin-[INFO]:-Starting gppkg with arg
s: -i pdltools-@PDLTOOLS_VERSION_STRING@-gpdb4.3-rhel5-x86_64.gppkg
20140826:07:05:22:015733 gppkg:localhost:gpadmin-[INFO]:-Installing package pdlt
ools-@PDLTOOLS_VERSION_STRING@-gpdb4.3-rhel5-x86_64.gppkg
20140826:07:05:23:015733 gppkg:localhost:gpadmin-[INFO]:-Validating rpm installa
tion cmdStr='rpm --test -i /usr/local/greenplum-db-4.3.0.0/.tmp/pdltools-@PDLTOOLS_VERSION_STRING@-1
.x86_64.rpm --dbpath /usr/local/greenplum-db-4.3.0.0/share/packages/database --p
refix /usr/local/greenplum-db-4.3.0.0'
20140826:07:05:23:015733 gppkg:localhost:gpadmin-[INFO]:-Installing pdltools-
@PDLTOOLS_VERSION_STRING@-gpdb4.3-rhel5-x86_64.gppkg locally
20140826:07:05:23:015733 gppkg:localhost:gpadmin-[INFO]:-Validating rpm installa
tion cmdStr='rpm --test -i /usr/local/greenplum-db-4.3.0.0/.tmp/pdltools-@PDLTOOLS_VERSION_STRING@-1
.x86_64.rpm --dbpath /usr/local/greenplum-db-4.3.0.0/share/packages/database --p
refix /usr/local/greenplum-db-4.3.0.0'
20140826:07:05:23:015733 gppkg:localhost:gpadmin-[INFO]:-Installing rpms cmdStr=
'rpm -i /usr/local/greenplum-db-4.3.0.0/.tmp/pdltools-@PDLTOOLS_VERSION_STRING@-1.x86_64.rpm --dbpat
h /usr/local/greenplum-db-4.3.0.0/share/packages/database --prefix=/usr/local/gr
eenplum-db-4.3.0.0'
20140826:07:05:23:015733 gppkg:localhost:gpadmin-[INFO]:-Completed local install
ation of pdltools-@PDLTOOLS_VERSION_STRING@-gpdb4.3-rhel5-x86_64.gppkg.
20140826:07:05:23:015733 gppkg:localhost:gpadmin-[INFO]:-Please run the followin
g command to deploy PDL Tools
usage:  pdlpack install [-s schema_name] -p greenplum [-S sugar_schema_name]
                       [-M madlib_schema_name] -c user@host:port/database
Example:
   $ $GPHOME/pdltools/bin/pdlpack install -s pdltools -c gpadmin@mdw:5432/testdb
   This will install PDL Tools objects into a Greenplum database named "testdb"
   running on server "mdw" on port 5432. Installer will try to login as
   "gpadmin" and will prompt for password. The target schema for the main
   library will be "pdltools" (specified here explicitly) and the target
   schema for the SUgAR library, packaged with it, will be "sugarlib"
   (specified here implicitly). MADlib objects will be searched for in the
   "madlib" schema (also specified here implicitly).
   In all cases, these schema choices are the default options.

To uninstall the package, use "gppkg -r".
For additional options run:
$ pdlpack --help
Release notes and additional documentation can be found at
https://sites.google.com/a/pivotal.io/global-data-science/pdl-tools,
as well as on http://pdl-tools.pa.pivotal.io/
accessible through the Pivotal VPN.
20140826:07:05:23:015733 gppkg:localhost:gpadmin-[INFO]:-pdltools-@PDLTOOLS_VERSION_STRING@-gpdb4.3-
rhel5-x86_64.gppkg successfully installed.
@endverbatim

### Installing PDL Tools onto a target database as 'gpadmin'

Use these instructions to install PDL Tools onto a target database if you are
able to log in as 'gpadmin'. If not, refer to the next section.

Run the following command as 'gpadmin'.

<pre class="example">
/usr/local/greenplum-db/pdltools/bin/pdlpack install [-s <em>schema name</em>] -p greenplum [-S <em>SUgAR schema name</em>] [-M <em>MADlib schema name</em>] -c <em>user\@host:port/database name</em>
</pre>

where <em>database name</em> should be replaced by the name of the database you wish to install to, <em>schema name</em> is the schema to install to, <em>SUgAR schema name</em> is the schema in which to install the SUgAR library, and <em>MADlib schema name</em> is the schema to search for MADlib objects in. By default, <em>schema name</em> would be "pdltools", <em>SUgAR schema name</em> would be "sugarlib" and <em>MADlib schema name</em> would be "madlib". Typically, <em>user\@host:port</em> is chosen to be "gpadmin@localhost:5433", as in the example below. MADlib objects do not need to be present during PDL Tools installation for it to succeed, though some of the run-time functionality of PDL Tools relies on calling MADlib routines.

Note that starting with PDL Tools 1.3, specifying '-p greenplum' to set the
platform is mandatory.

@verbatim
$ /usr/local/greenplum-db/pdltools/bin/pdlpack install -s pdltools -p greenplum -c gpadmin@localhost:5433/exampledb
pdlpack.py : INFO : Detected greenplum version 4.3.
pdlpack.py : INFO : Testing PL/Python environment...
pdlpack.py : INFO : > PL/Python environment OK (version: 2.6.2)
pdlpack.py : INFO : Testing PL/Perl environment...
pdlpack.py : INFO : > PL/Perl environment OK (version: 5.010001)
pdlpack.py : INFO : Installing pdltools into PDLTOOLS schema and SUgAR into SUGA
RLIB schema...
pdlpack.py : INFO : Looking for MADlib installation in MADLIB schema...
pdlpack.py : INFO : Would you like to continue?
>>> y
pdlpack.py : INFO : > Renaming schema SUGARLIB to SUGARLIB_V0_4_4
pdlpack.py : INFO : > Creating PDLTOOLS schema
pdlpack.py : INFO : > Creating SUGARLIB schema
pdlpack.py : INFO : > Granting usage on PDLTOOLS schema
pdlpack.py : INFO : > Granting usage on SUGARLIB schema
pdlpack.py : INFO : > Updating PDL Tools migration history.
pdlpack.py : INFO : > Creating PDLTOOLS.MigrationHistory table
pdlpack.py : INFO : > Writing version info in PDLTOOLS.MigrationHistory table
pdlpack.py : INFO : > Updating SUgAR migration history.
pdlpack.py : INFO : > Creating SUGARLIB.MigrationHistory table
pdlpack.py : INFO : > Saving data from SUGARLIB_V0_4_4.MigrationHistory table
pdlpack.py : INFO : > Writing version info in SUGARLIB.MigrationHistory table
pdlpack.py : INFO : > Creating objects for modules:
pdlpack.py : INFO : > - common
pdlpack.py : INFO : > - uri_utils
pdlpack.py : INFO : > - edit_distance
pdlpack.py : INFO : > - anonymization
pdlpack.py : INFO : > - session
pdlpack.py : INFO : > - connected_components
pdlpack.py : INFO : > - sugar
pdlpack.py : INFO : > - complex
pdlpack.py : INFO : > - stemming
pdlpack.py : INFO : > - sampling
pdlpack.py : INFO : > - complete_linkage
pdlpack.py : INFO : PDL Tools @PDLTOOLS_VERSION_STRING@ installed successfully in PDLTOOLS schema.
pdlpack.py : INFO : SUgAR 0.4.4 installed successfully in SUGARLIB schema.
pdlpack.py : INFO : Installation completed successfully.
@endverbatim

Note that this installation may be interactive, asking yes/no questions.

### Installing PDL Tools onto a target database not as 'gpadmin'

If you are unable to log in as 'gpadmin', you can still install PDL Tools onto
a database by modifying the instructions from the previous section as follows.

First, make sure that the GPDB 'MASTER_DATA_DIRECTORY' and 'GPHOME' are properly
set in your '~/.bashrc' file and that '$GPHOME/greenplum_path.sh' is
subsequently sourced. Here is an example of lines you can add to your
'~/.bashrc' to create this effect:

<pre class="example">
\# User specific aliases and functions
export MASTER_DATA_DIRECTORY=/data/master/gpseg-1
export GPHOME=/usr/local/greenplum-db
source $GPHOME/greenplum_path.sh
</pre>

Next, log into your 'mdw' node. (It is not possible to install PDL Tools
anywhere but on the local host when not logged in as 'gpadmin'.)

As a final step, run the 'pdlpack' installation command, as described in the
previous section, making sure that you list 'localhost' as your target
computer and use your own user name. Here is an example for a typical
installation on a DCA environment.

@verbatim
$ /usr/local/greenplum-db/pdltools/bin/pdlpack install -s pdltools -p greenplum -c user@localhost:5432/exampledb
@endverbatim

### Checking that the installation was successful (optional)

Once you've installed the package onto your database, you may want to check that the installation was successful. The `install-check` option give you a method to do so.

<pre class="example">
/usr/local/greenplum-db/pdltools/bin/pdlpack install-check [-s <em>schema name</em>] -p greenplum [-S <em>SUgAR schema name</em>] [-M <em>MADlib schema name</em>] -c <em>user\@host:port/database name</em>
</pre>

where <em>database name</em> should be replaced by the name of the database you installed to, and <em>schema name</em>, <em>SUgAR schema name</em> and <em>MADlib schema name</em> are the schemas (with the same defaults as in the installation command).

Run this command as gpadmin, or follow the instructions in the previous section
in order to run the command as another user.

@verbatim
$ /usr/local/greenplum-db/pdltools/bin/pdlpack install-check -s pdltools -p greenplum -c gpadmin@localhost:5433/exampledb
pdlpack.py : INFO : Detected greenplum version 4.3.
TEST CASE RESULT|Module: uri_utils|test_uri_utils.sql_in|PASS|Time: 58 milliseco
nds
TEST CASE RESULT|Module: edit_distance|test_edit_distance.sql_in|PASS|Time: 42 m
illiseconds
TEST CASE RESULT|Module: anonymization|test_anonymization.sql_in|PASS|Time: 1143
 milliseconds
TEST CASE RESULT|Module: session|test_session.sql_in|PASS|Time: 463 milliseconds
TEST CASE RESULT|Module: connected_components|test_connected_components.sql_in|P
ASS|Time: 2807 milliseconds
TEST CASE RESULT|Module: sugar|test_sugar.sql_in|PASS|Time: 5146 milliseconds
TEST CASE RESULT|Module: complex|test_complex_type.sql_in|PASS|Time: 461 millise
conds
TEST CASE RESULT|Module: stemming|test_porter_stemmer.sql_in|PASS|Time: 39 milli
seconds
TEST CASE RESULT|Module: sampling|test_sampling.sql_in|PASS|Time: 1186 milliseco
TEST CASE RESULT|Module: complete_linkage|test_complete_linkage.sql_in|PASS|Time: 2313 milliseco
nds
@endverbatim


____


## Upgrading

Starting with version 1.1 of PDL Tools, upgrading is done using exactly the same commands as a fresh installation. The program will automatically detect the existing version and offer to back it up as part of the upgrade. If the upgrade is unsuccessful for any reason, the system will properly roll back the database to its prior state.
The PDL Tools installer will warn when installing a version that is already installed and will correctly detect and stop the installation when the new version is lower than the target version. If you really want to downgrade to an earlier version of PDL Tools, you will want to uninstall and reinstall, as explained below.

___


## Uninstalling

It is not necessary to uninstall PDL Tools as part of a regular upgrade process. However, if you wish to uninstall the library, this section describes how to do so.
First, uninstall the library from your computer.

<pre class="example">
gppkg -r pdltools-@PDLTOOLS_VERSION_STRING@
</pre>

Then, drop the schemas from your database. Assuming the library was installed into the \c pdltools and \c sugarlib schemas, the `psql` command line is

<pre class="example">
DROP SCHEMA IF EXISTS pdltools CASCADE;
DROP SCHEMA IF EXISTS sugarlib CASCADE;
</pre>

____

## Installing PDL Tools on HAWQ

PDL Tools is available as a gppkg for HAWQ 1.3 and as an rpm for HAWQ 1.2 (HAWQ 1.2 doesn't support gppkgs). Currently only a subset of the modules supported on GPDB are available for PDL Tools on HAWQ.
The complex numbers modules is unavailable due to lack of support for User Defined Types (UDTs) yet on HAWQ. The sessionization and sampling modules are unsupported because of the unavailability of a PL/Perl gppkg for HAWQ. We expect these to be supported as soon as PL/Perl is made available.

The installation instructions for HAWQ 1.3 are similar to those for GPDB.
Change the '-p greenplum' directive to '-p hawq' to set the platform
properly.
We've provided a simple Python based installer for PDL Tools for HAWQ 1.2. You can download the install here: <A HREF="scripts/hawq_install">PDL Tools HAWQ Install Script</A>.

You can install PDL Tools on HAWQ 1.2 then like so:
<pre class="example">
./hawq_install pdltools-1.3-Linux.rpm $HOME/hostfile
</pre>

Here's a sample installation log on a 4 node cluster, with the `hostfile` containing the entries `mdw`, `sdw1-3`

@verbatim
[gpadmin@mdw]$ ./hawq_install pdltools-1.3-Linux.rpm ../hostfile
Querying mdw for any existing installation of pdltools-1.3-Linux.rpm
package pdltools-1.3 is not installed
Querying sdw-1  for any existing installation of pdltools-1.3-Linux.rpm
package pdltools-1.3 is not installed
Querying sdw-2  for any existing installation of pdltools-1.3-Linux.rpm
package pdltools-1.3 is not installed
Querying sdw-3 for any existing installation of pdltools-1.3-Linux.rpm
package pdltools-1.3 is not installed
Copying pdltools-1.3-Linux.rpm to all hosts
gpscp -f ../hostfile pdltools-1.3-Linux.rpm =:/usr/local/hawq/.
Installing pdltools-1.3-Linux.rpm on all hosts
gpssh -f ../hostfile rpm -v -i /usr/local/hawq/./pdltools-1.3-Linux.rpm --nodeps --dbpath /usr/local/hawq/./share/packages/database --prefix /usr/local/hawq/.
                    
[sdw-3]
[sdw-2] Preparing packages for installation...
[sdw-2] pdltools-1.3-1
[sdw-1] Preparing packages for installation...
[sdw-1] pdltools-1.3-1
[mdw] Preparing packages for installation...
[mdw] pdltools-1.3-1
Successfully installed PDL Tools on all nodes under /usr/local/hawq/./pdltools
@endverbatim

Once the rpm has been installed, you can then install the PDL Tools schema in your target database as listed in the sections above. Here is a sample installation log and install-check log

### Installing PDL Tools for HAWQ in a target database


@verbatim
[gpadmin@mdw]$ /usr/local/hawq/pdltools/bin/pdlpack install -s pdltools -p hawq -c gpadmin@mdw:5432/testdb
Password for user gpadmin: 
pdlpack.py : INFO : Detected hawq version 1.2.
pdlpack.py : INFO : Testing PL/Python environment...
pdlpack.py : INFO : > PL/Python environment OK (version: 2.6.2)
pdlpack.py : INFO : Installing pdltools into PDLTOOLS schema and SUgAR into SUGARLIB schema...
pdlpack.py : INFO : Looking for MADlib installation in MADLIB schema...
pdlpack.py : INFO : **********************************************************************
pdlpack.py : INFO : * NOTE:
pdlpack.py : INFO : * Both PDL Tools and SUgAR installations are already at latest version.
pdlpack.py : INFO : **********************************************************************
pdlpack.py : INFO : * Schema PDLTools and/or SUgAR already exists
pdlpack.py : INFO : * For HAWQ, these schemas will be overwritten by the objects in this installer
pdlpack.py : INFO : * It may drop any database objects (tables, views, etc.) that depend on 'pdltools or SUgAR' SCHEMA!!!!!!!!!!!!!
pdlpack.py : INFO : ***************************************************************************
pdlpack.py : INFO : Would you like to continue?
>>> y
pdlpack.py : INFO : > Granting usage on PDLTOOLS schema
pdlpack.py : INFO : > Granting usage on SUGARLIB schema
pdlpack.py : INFO : > Updating PDL Tools migration history.
pdlpack.py : INFO : > Writing version info in PDLTOOLS.MigrationHistory table
pdlpack.py : INFO : > Updating SUgAR migration history.
pdlpack.py : INFO : > Writing version info in SUGARLIB.MigrationHistory table
pdlpack.py : INFO : > Creating objects for modules:
pdlpack.py : INFO : > - common
pdlpack.py : INFO : > - uri_utils
pdlpack.py : INFO : > - edit_distance
pdlpack.py : INFO : > - anonymization
pdlpack.py : INFO : > - stemming
pdlpack.py : INFO : PDL Tools 1.3 installed successfully in PDLTOOLS schema.
pdlpack.py : INFO : Installation completed successfully.
[gpadmin@mdw]$ 
@endverbatim	 

### Install-check PDL Tools for HAWQ 


@verbatim
[gpadmin@mdw]$ /usr/local/hawq/pdltools/bin/pdlpack install-check -s pdltools -p hawq -c gpadmin@mdw:5432/testdb
Password for user gpadmin: 
pdlpack.py : INFO : Detected hawq version 1.2.
TEST CASE RESULT|Module: uri_utils|test_uri_utils.sql_in|PASS|Time: 132 milliseconds
TEST CASE RESULT|Module: edit_distance|test_edit_distance.sql_in|PASS|Time: 389 milliseconds
TEST CASE RESULT|Module: anonymization|test_anonymization.sql_in|PASS|Time: 2547 milliseconds
TEST CASE RESULT|Module: stemming|test_porter_stemmer.sql_in|PASS|Time: 201 milliseconds
[gpadmin@mdw]$
@endverbatim

____


*/
