-- File: test_prediction_metrics.sql
-- Unit test for prediction metrics module.

CREATE TABLE test_set(
                   pred FLOAT8,
                   obs FLOAT8
                  ) DISTRIBUTED RANDOMLY;

INSERT INTO test_set VALUES
  (37.5,53.1),(12.3,34.2), (74.2,65.4), (91.1,82.1);

SELECT assert(mf_mae(pred,obs)::TEXT,(55.3::FLOAT8/4)::TEXT),
       assert(mf_mape(pred,obs)::TEXT,(0.29457879363601258::FLOAT8)::TEXT),
       assert(mf_mpe(pred,obs)::TEXT,(-0.17248930032771026::FLOAT8)::TEXT),
       assert(mf_rmse(pred,obs)::TEXT,(14.844274990716119::FLOAT8)::TEXT),
       assert(mf_r2(pred,obs)::TEXT,(0.279929088443373::FLOAT8)::TEXT),
       assert(mf_adjusted_r2(pred,obs,3,100)::TEXT,(0.257426872457228::FLOAT8)::TEXT)
FROM test_set;

-- The ground truth given has more accuracy digits than FLOAT8 where possible.

CREATE TABLE test_set2 AS SELECT (x+y)%(m1+2*m2) AS pred, (x*y)%(m1+2*m2) AS obs, m1,m2 FROM generate_series(0,1) m1, generate_series(1,2) m2, generate_series(0,59) x, generate_series(0,59) y DISTRIBUTED RANDOMLY;

SELECT pdltools.mf_binary_classifier('test_set2','pred','obs','0','out_table','m1, m2');

SELECT assert(string_agg(m1::TEXT || ',' ORDER BY m1+2*m2),'0,1,0,1,'),
       assert(string_agg(m2::TEXT || ',' ORDER BY m1+2*m2),'1,1,2,2,'),
       assert(string_agg(tp::TEXT || ',' ORDER BY m1+2*m2),'900,400,450,144,'),
       assert(string_agg(tn::TEXT || ',' ORDER BY m1+2*m2),'0,800,1350,1728,'),
       assert(string_agg(fp::TEXT || ',' ORDER BY m1+2*m2),'900,800,450,576,'),
       assert(string_agg(fn::TEXT || ',' ORDER BY m1+2*m2),'1800,1600,1350,1152,'),
       assert(string_agg(substring(tpr::TEXT for 10) || ',' ORDER BY m1+2*m2),
         '0.33333333,0.20000000,0.25000000,0.11111111,'::TEXT),
       assert(string_agg(substring(tnr::TEXT for 10) || ',' ORDER BY m1+2*m2),
         '0.00000000,0.50000000,0.75000000,0.75000000,'::TEXT),
       assert(string_agg(substring(ppv::TEXT for 10) || ',' ORDER BY m1+2*m2),
         '0.50000000,0.33333333,0.50000000,0.20000000,'::TEXT),
       assert(string_agg(substring(npv::TEXT for 10) || ',' ORDER BY m1+2*m2),
         '0.00000000,0.33333333,0.50000000,0.60000000,'::TEXT),
       assert(string_agg(substring(fpr::TEXT for 10) || ',' ORDER BY m1+2*m2),
         '1.00000000,0.50000000,0.25000000,0.25000000,'::TEXT),
       assert(string_agg(substring(fdr::TEXT for 10) || ',' ORDER BY m1+2*m2),
         '0.50000000,0.66666666,0.50000000,0.80000000,'::TEXT),
       assert(string_agg(substring(fnr::TEXT for 10) || ',' ORDER BY m1+2*m2),
         '0.66666666,0.80000000,0.75000000,0.88888888,'::TEXT),
       assert(string_agg(substring(acc::TEXT for 10) || ',' ORDER BY m1+2*m2),
         '0.25000000,0.33333333,0.50000000,0.52000000,'::TEXT),
       assert(string_agg(substring(f1::TEXT for 10) || ',' ORDER BY m1+2*m2),
         '0.40000000,0.25000000,0.33333333,0.14285714,'::TEXT),
       assert(string_agg(substring(auc::TEXT for 10) || ',' ORDER BY m1+2*m2),
         '0.16666666,0.35000000,0.50000000,0.43055555,'::TEXT)
FROM out_table;

SELECT pdltools.mf_binary_classifier('test_set2','pred','obs','0','out_table2');

SELECT assert(count(*)::TEXT,'1') FROM out_table2;

SELECT assert(tp::TEXT,1894::TEXT),
       assert(tn::TEXT,3878::TEXT),
       assert(fp::TEXT,2726::TEXT),
       assert(fn::TEXT,5902::TEXT),
       assert(tpr::TEXT,(1894.0/(1894+5902))::TEXT),
       assert(tnr::TEXT,(3878.0/(3878+2726))::TEXT),
       assert(ppv::TEXT,(1894.0/(1894+2726))::TEXT),
       assert(npv::TEXT,(3878.0/(3878+5902))::TEXT),
       assert(fpr::TEXT,(2726.0/(2726+3878))::TEXT),
       assert(fdr::TEXT,(2726.0/(2726+1894))::TEXT),
       assert(fnr::TEXT,(5902.0/(1894+5902))::TEXT),
       assert(acc::TEXT,((1894.0+3878)/(3600*4))::TEXT),
       assert(f1::TEXT,(1894.0/6208)::TEXT),
       assert(auc::TEXT,((0.5*1894/(1894+5902)+0.5*3878/(3878+2726)))::TEXT)
FROM out_table2;

DROP TABLE test_set, test_set2, out_table, out_table2;

