-- File: test_prediction_metrics.sql
-- Unit test for prediction metrics module.

CREATE TABLE test_set(
                   pred FLOAT8,
                   obs FLOAT8
                  ) DISTRIBUTED RANDOMLY;

INSERT INTO test_set VALUES
  (37.5,53.1),(12.3,34.2), (74.2,65.4), (91.1,82.1);

SELECT assert(mf_mae(pred,obs)::TEXT,(55.3::FLOAT8/4)::TEXT),
       assert(mf_mape(pred,obs)::TEXT,(0.29457879363601258::FLOAT8)::TEXT),
       assert(mf_mpe(pred,obs)::TEXT,(-0.17248930032771026::FLOAT8)::TEXT),
       assert(mf_rmse(pred,obs)::TEXT,(14.844274990716119::FLOAT8)::TEXT),
       assert(mf_r2(pred,obs)::TEXT,(0.279929088443373::FLOAT8)::TEXT),
       assert(mf_adjusted_r2(pred,obs,3,100)::TEXT,(0.257426872457228::FLOAT8)::TEXT)
FROM test_set;

DROP TABLE test_set;

CREATE TABLE binary_classifier (pred float8, obs integer, m1 integer, m2 integer) DISTRIBUTED RANDOMLY;

INSERT INTO binary_classifier VALUES
( 0.75000000000000000000 ,   1 ,  0 ,  1),
( 0.00000000000000000000 ,   0 ,  1 ,  1),
( 1.00000000000000000000 ,   1 ,  1 ,  1),
( 0.87500000000000000000 ,   1 ,  0 ,  0),
( 0.37500000000000000000 ,   0 ,  1 ,  0),
( 0.12500000000000000000 ,   0 ,  0 ,  1),
( 0.50000000000000000000 ,   0 ,  1 ,  0),
( 0.25000000000000000000 ,   0 ,  0 ,  1),
( 0.12500000000000000000 ,   0 ,  1 ,  1),
( 0.37500000000000000000 ,   0 ,  0 ,  0),
( 0.12500000000000000000 ,   0 ,  0 ,  0),
( 0.37500000000000000000 ,   1 ,  0 ,  1),
( 0.50000000000000000000 ,   1 ,  1 ,  1),
( 0.25000000000000000000 ,   0 ,  1 ,  1),
( 0.00000000000000000000 ,   0 ,  0 ,  1),
( 0.12500000000000000000 ,   1 ,  1 ,  1),
( 0.25000000000000000000 ,   1 ,  0 ,  0),
( 0.62500000000000000000 ,   1 ,  1 ,  1),
( 0.12500000000000000000 ,   0 ,  1 ,  1),
( 0.25000000000000000000 ,   0 ,  0 ,  0),
( 0.00000000000000000000 ,   0 ,  0 ,  1),
( 0.75000000000000000000 ,   0 ,  1 ,  1),
( 0.12500000000000000000 ,   0 ,  0 ,  0),
( 0.12500000000000000000 ,   0 ,  0 ,  0),
( 0.37500000000000000000 ,   1 ,  0 ,  0),
( 0.25000000000000000000 ,   0 ,  1 ,  1),
( 1.00000000000000000000 ,   1 ,  0 ,  0),
( 0.25000000000000000000 ,   0 ,  1 ,  0),
( 0.62500000000000000000 ,   1 ,  1 ,  1),
( 0.50000000000000000000 ,   0 ,  1 ,  0),
( 0.62500000000000000000 ,   0 ,  0 ,  1),
( 0.50000000000000000000 ,   0 ,  0 ,  1),
( 0.87500000000000000000 ,   1 ,  0 ,  0),
( 0.50000000000000000000 ,   1 ,  1 ,  0),
( 0.62500000000000000000 ,   0 ,  0 ,  0),
( 0.87500000000000000000 ,   1 ,  1 ,  1),
( 0.25000000000000000000 ,   0 ,  1 ,  0),
( 0.75000000000000000000 ,   0 ,  1 ,  1),
( 0.12500000000000000000 ,   0 ,  0 ,  1),
( 0.87500000000000000000 ,   1 ,  1 ,  0),
( 0.25000000000000000000 ,   1 ,  1 ,  0),
( 0.25000000000000000000 ,   1 ,  0 ,  1),
( 0.25000000000000000000 ,   0 ,  0 ,  0),
( 0.75000000000000000000 ,   1 ,  0 ,  0),
( 0.25000000000000000000 ,   0 ,  0 ,  1),
( 0.25000000000000000000 ,   0 ,  0 ,  1),
( 0.75000000000000000000 ,   1 ,  1 ,  0),
( 1.00000000000000000000 ,   1 ,  1 ,  1),
( 0.50000000000000000000 ,   1 ,  0 ,  1),
( 0.25000000000000000000 ,   1 ,  0 ,  1),
( 0.37500000000000000000 ,   0 ,  1 ,  1),
( 0.62500000000000000000 ,   0 ,  0 ,  0),
( 0.50000000000000000000 ,   0 ,  1 ,  1),
( 0.75000000000000000000 ,   1 ,  0 ,  1),
( 0.37500000000000000000 ,   1 ,  0 ,  0),
( 0.50000000000000000000 ,   1 ,  0 ,  0),
( 0.75000000000000000000 ,   0 ,  1 ,  1),
( 0.12500000000000000000 ,   0 ,  1 ,  0),
( 0.12500000000000000000 ,   0 ,  1 ,  1),
( 0.25000000000000000000 ,   0 ,  0 ,  0),
( 0.37500000000000000000 ,   1 ,  1 ,  1),
( 0.50000000000000000000 ,   0 ,  0 ,  1),
( 0.37500000000000000000 ,   0 ,  0 ,  0),
( 0.25000000000000000000 ,   1 ,  0 ,  1),
( 0.87500000000000000000 ,   1 ,  1 ,  0),
( 0.75000000000000000000 ,   1 ,  0 ,  0),
( 0.12500000000000000000 ,   0 ,  0 ,  1),
( 0.87500000000000000000 ,   1 ,  0 ,  0),
( 0.25000000000000000000 ,   0 ,  1 ,  0),
( 0.25000000000000000000 ,   0 ,  1 ,  0),
( 0.25000000000000000000 ,   0 ,  0 ,  1),
( 0.62500000000000000000 ,   0 ,  0 ,  0),
( 0.50000000000000000000 ,   0 ,  0 ,  1),
( 0.37500000000000000000 ,   0 ,  1 ,  1),
( 0.12500000000000000000 ,   0 ,  1 ,  0),
( 1.00000000000000000000 ,   1 ,  0 ,  1),
( 0.62500000000000000000 ,   1 ,  0 ,  1),
( 0.25000000000000000000 ,   0 ,  0 ,  0),
( 0.37500000000000000000 ,   1 ,  0 ,  1),
( 0.62500000000000000000 ,   0 ,  0 ,  1),
( 0.87500000000000000000 ,   1 ,  1 ,  1),
( 0.50000000000000000000 ,   0 ,  0 ,  1),
( 0.87500000000000000000 ,   1 ,  1 ,  0),
( 0.87500000000000000000 ,   1 ,  0 ,  0),
( 0.75000000000000000000 ,   1 ,  0 ,  0),
( 0.62500000000000000000 ,   1 ,  1 ,  0),
( 0.25000000000000000000 ,   0 ,  0 ,  0),
( 0.75000000000000000000 ,   1 ,  1 ,  0),
( 0.50000000000000000000 ,   1 ,  1 ,  0),
( 0.00000000000000000000 ,   0 ,  1 ,  1),
( 0.25000000000000000000 ,   1 ,  0 ,  1),
( 0.75000000000000000000 ,   0 ,  0 ,  1),
( 0.62500000000000000000 ,   1 ,  0 ,  1),
( 0.37500000000000000000 ,   0 ,  0 ,  0),
( 0.75000000000000000000 ,   1 ,  1 ,  0),
( 0.37500000000000000000 ,   0 ,  0 ,  1),
( 0.50000000000000000000 ,   0 ,  1 ,  1),
( 0.00000000000000000000 ,   0 ,  0 ,  1),
( 0.12500000000000000000 ,   0 ,  1 ,  0),
( 0.25000000000000000000 ,   0 ,  0 ,  1);

SELECT assert(CASE WHEN (abs(mf_auc('binary_classifier','pred','obs')-0.814769481844)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test');

SELECT mf_auc('binary_classifier','pred','obs','auc_table','m1, m2');

CREATE TABLE auc_table_comparison (m1 integer, m2 integer, auc float8)
DISTRIBUTED BY (m1,m2);

INSERT INTO auc_table_comparison VALUES
(  0 ,  1 , 0.70614035087719298245804824561403508771930),
(  1 ,  0 , 0.93000000000000000000000000000000000000000),
(  0 ,  0 , 0.87797619047619047619250000000000000000000),
(  1 ,  1 , 0.78968253968253968254051587301587301587305);

SELECT
  assert(count(*)::TEXT,4::TEXT),
  assert(count(DISTINCT m1+2*m2)::TEXT,4::TEXT),
  assert(count(m1)::TEXT,4::TEXT),
  assert(min(m1)::TEXT,0::TEXT),
  assert(max(m1)::TEXT,1::TEXT),
  assert(count(m2)::TEXT,4::TEXT),
  assert(min(m2)::TEXT,0::TEXT),
  assert(max(m2)::TEXT,1::TEXT)
FROM auc_table;

SELECT
  assert(CASE WHEN (abs(c.auc-a.auc)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test')
FROM auc_table a, auc_table_comparison c
WHERE a.m1=c.m1 AND a.m2=c.m2;

SELECT mf_binary_classifier('binary_classifier','pred','obs','out_table');

SELECT mf_binary_classifier('binary_classifier','pred','obs',
                            'out_table2','m1, m2');

CREATE TABLE out_table_comparison (
  c_threshold numeric,
  c_tp numeric,
  c_fp numeric,
  c_fn numeric,
  c_tn numeric,
  c_tpr numeric,
  c_tnr numeric,
  c_ppv numeric,
  c_npv numeric,
  c_fpr numeric,
  c_fdr numeric,
  c_fnr numeric,
  c_acc numeric,
  c_f1 numeric
) DISTRIBUTED RANDOMLY;

INSERT INTO out_table_comparison VALUES
( 0.00000000000000000000 , 43 , 57 ,  0 ,  0 , 1.00000000000000000000 , 0.00000000000000000000 , 0.43000000000000000000 , NULL, 1.00000000000000000000 , 0.57000000000000000000 , 0.00000000000000000000 , 0.43000000000000000000 , 0.60139860139860139860),
( 0.25000000000000000000 , 42 , 40 ,  1 , 17 , 0.97674418604651162791 , 0.29824561403508771930 , 0.51219512195121951220 , 0.94444444444444444444 , 0.70175438596491228070 , 0.48780487804878048780 , 0.02325581395348837209 , 0.59000000000000000000 , 0.67200000000000000000),
( 0.50000000000000000000 , 31 , 17 , 12 , 40 , 0.72093023255813953488 , 0.70175438596491228070 , 0.64583333333333333333 , 0.76923076923076923077 , 0.29824561403508771930 , 0.35416666666666666667 , 0.27906976744186046512 , 0.71000000000000000000 , 0.68131868131868131868),
( 0.75000000000000000000 , 21 ,  4 , 22 , 53 , 0.48837209302325581395 , 0.92982456140350877193 , 0.84000000000000000000 , 0.70666666666666666667 , 0.07017543859649122807 , 0.16000000000000000000 , 0.51162790697674418605 , 0.74000000000000000000 , 0.61764705882352941176),
( 1.00000000000000000000 ,  4 ,  0 , 39 , 57 , 0.09302325581395348837 , 1.00000000000000000000 , 1.00000000000000000000 , 0.59375000000000000000 , 0.00000000000000000000 , 0.00000000000000000000 , 0.90697674418604651163 , 0.61000000000000000000 , 0.17021276595744680851),
( 0.12500000000000000000 , 43 , 52 ,  0 ,  5 , 1.00000000000000000000 , 0.08771929824561403509 , 0.45263157894736842105 , 1.00000000000000000000 , 0.91228070175438596491 , 0.54736842105263157895 , 0.00000000000000000000 , 0.48000000000000000000 , 0.62318840579710144928),
( 0.37500000000000000000 , 36 , 24 ,  7 , 33 , 0.83720930232558139535 , 0.57894736842105263158 , 0.60000000000000000000 , 0.82500000000000000000 , 0.42105263157894736842 , 0.40000000000000000000 , 0.16279069767441860465 , 0.69000000000000000000 , 0.69902912621359223301),
( 0.62500000000000000000 , 26 ,  9 , 17 , 48 , 0.60465116279069767442 , 0.84210526315789473684 , 0.74285714285714285714 , 0.73846153846153846154 , 0.15789473684210526316 , 0.25714285714285714286 , 0.39534883720930232558 , 0.74000000000000000000 , 0.66666666666666666667),
( 0.87500000000000000000 , 13 ,  0 , 30 , 57 , 0.30232558139534883721 , 1.00000000000000000000 , 1.00000000000000000000 , 0.65517241379310344828 , 0.00000000000000000000 , 0.00000000000000000000 , 0.69767441860465116279 , 0.70000000000000000000 , 0.46428571428571428571);

SELECT
  assert(count(*)::TEXT,9::TEXT),
  assert(count(threshold)::TEXT,9::TEXT)
FROM out_table;

SELECT
  assert(count(*)::TEXT,9::TEXT)
FROM out_table_comparison c FULL JOIN out_table o
  ON c.c_threshold=o.threshold;

SELECT
  assert(CASE WHEN (abs(tp-c_tp)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(fp-c_fp)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(fn-c_fn)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(tn-c_tn)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(tpr-c_tpr)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(tnr-c_tnr)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(ppv-c_ppv)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN ((npv IS NULL) AND (c_npv IS NULL)) OR (abs(npv-c_npv)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(fpr-c_fpr)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(fdr-c_fdr)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(fnr-c_fnr)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(acc-c_acc)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(f1-c_f1)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test')
FROM out_table_comparison c FULL JOIN out_table o
  ON c.c_threshold=o.threshold;

CREATE TABLE out_table2_comparison (
  m1 integer,
  m2 integer,
  c_threshold numeric,
  c_tp numeric,
  c_fp numeric,
  c_fn numeric,
  c_tn numeric,
  c_tpr numeric,
  c_tnr numeric,
  c_ppv numeric,
  c_npv numeric,
  c_fpr numeric,
  c_fdr numeric,
  c_fnr numeric,
  c_acc numeric,
  c_f1 numeric
) DISTRIBUTED BY (m1,m2);

INSERT INTO out_table2_comparison VALUES
(  0 ,  1 , 1.00000000000000000000 ,  1 ,  0 , 11 , 19 , 0.08333333333333333333 ,1.00000000000000000000 , 1.00000000000000000000 , 0.63333333333333333333 , 0.00000000000000000000 , 0.00000000000000000000 , 0.91666666666666666667 , 0.64516129032258064516 , 0.15384615384615384615),
(  0 ,  1 , 0.75000000000000000000 ,  3 ,  1 ,  9 , 18 , 0.25000000000000000000 ,0.94736842105263157895 , 0.75000000000000000000 , 0.66666666666666666667 , 0.05263157894736842105 , 0.25000000000000000000 , 0.75000000000000000000 , 0.67741935483870967742 , 0.37500000000000000000),
(  0 ,  1 , 0.62500000000000000000 ,  5 ,  3 ,  7 , 16 , 0.41666666666666666667 ,0.84210526315789473684 , 0.62500000000000000000 , 0.69565217391304347826 , 0.15789473684210526316 , 0.37500000000000000000 , 0.58333333333333333333 , 0.67741935483870967742 , 0.50000000000000000000),
(  0 ,  1 , 0.50000000000000000000 ,  6 ,  7 ,  6 , 12 , 0.50000000000000000000 ,0.63157894736842105263 , 0.46153846153846153846 , 0.66666666666666666667 , 0.36842105263157894737 , 0.53846153846153846154 , 0.50000000000000000000 , 0.58064516129032258065 , 0.48000000000000000000),
(  0 ,  1 , 0.37500000000000000000 ,  8 ,  8 ,  4 , 11 , 0.66666666666666666667 ,0.57894736842105263158 , 0.50000000000000000000 , 0.73333333333333333333 , 0.42105263157894736842 , 0.50000000000000000000 , 0.33333333333333333333 , 0.61290322580645161290 , 0.57142857142857142857),
(  0 ,  1 , 0.25000000000000000000 , 12 , 13 ,  0 ,  6 , 1.00000000000000000000 ,0.31578947368421052632 , 0.48000000000000000000 , 1.00000000000000000000 , 0.68421052631578947368 , 0.52000000000000000000 , 0.00000000000000000000 , 0.58064516129032258065 , 0.64864864864864864865),
(  0 ,  1 , 0.12500000000000000000 , 12 , 16 ,  0 ,  3 , 1.00000000000000000000 ,0.15789473684210526316 , 0.42857142857142857143 , 1.00000000000000000000 , 0.84210526315789473684 , 0.57142857142857142857 , 0.00000000000000000000 , 0.48387096774193548387 , 0.60000000000000000000),
(  0 ,  1 , 0.00000000000000000000 , 12 , 19 ,  0 ,  0 , 1.00000000000000000000 ,0.00000000000000000000 , 0.38709677419354838710 , NULL, 1.00000000000000000000 , 0.61290322580645161290 , 0.00000000000000000000 , 0.38709677419354838710 , 0.55813953488372093023),
(  1 ,  0 , 0.87500000000000000000 ,  3 ,  0 ,  7 , 10 , 0.30000000000000000000 ,1.00000000000000000000 , 1.00000000000000000000 , 0.58823529411764705882 , 0.00000000000000000000 , 0.00000000000000000000 , 0.70000000000000000000 , 0.65000000000000000000 , 0.46153846153846153846),
(  1 ,  0 , 0.75000000000000000000 ,  6 ,  0 ,  4 , 10 , 0.60000000000000000000 ,1.00000000000000000000 , 1.00000000000000000000 , 0.71428571428571428571 , 0.00000000000000000000 , 0.00000000000000000000 , 0.40000000000000000000 , 0.80000000000000000000 , 0.75000000000000000000),
(  1 ,  0 , 0.62500000000000000000 ,  7 ,  0 ,  3 , 10 , 0.70000000000000000000 ,1.00000000000000000000 , 1.00000000000000000000 , 0.76923076923076923077 , 0.00000000000000000000 , 0.00000000000000000000 , 0.30000000000000000000 , 0.85000000000000000000 , 0.82352941176470588235),
(  1 ,  0 , 0.50000000000000000000 ,  9 ,  2 ,  1 ,  8 , 0.90000000000000000000 ,0.80000000000000000000 , 0.81818181818181818182 , 0.88888888888888888889 , 0.20000000000000000000 , 0.18181818181818181818 , 0.10000000000000000000 , 0.85000000000000000000 , 0.85714285714285714286),
(  1 ,  0 , 0.37500000000000000000 ,  9 ,  3 ,  1 ,  7 , 0.90000000000000000000 ,0.70000000000000000000 , 0.75000000000000000000 , 0.87500000000000000000 , 0.30000000000000000000 , 0.25000000000000000000 , 0.10000000000000000000 , 0.80000000000000000000 , 0.81818181818181818182),
(  1 ,  0 , 0.25000000000000000000 , 10 ,  7 ,  0 ,  3 , 1.00000000000000000000 ,0.30000000000000000000 , 0.58823529411764705882 , 1.00000000000000000000 , 0.70000000000000000000 , 0.41176470588235294118 , 0.00000000000000000000 , 0.65000000000000000000 , 0.74074074074074074074),
(  1 ,  0 , 0.12500000000000000000 , 10 , 10 ,  0 ,  0 , 1.00000000000000000000 ,0.00000000000000000000 , 0.50000000000000000000 , NULL, 1.00000000000000000000 , 0.50000000000000000000 , 0.00000000000000000000 , 0.50000000000000000000 , 0.66666666666666666667),
(  0 ,  0 , 1.00000000000000000000 ,  1 ,  0 , 11 , 14 , 0.08333333333333333333 ,1.00000000000000000000 , 1.00000000000000000000 , 0.56000000000000000000 , 0.00000000000000000000 , 0.00000000000000000000 , 0.91666666666666666667 , 0.57692307692307692308 , 0.15384615384615384615),
(  0 ,  0 , 0.87500000000000000000 ,  5 ,  0 ,  7 , 14 , 0.41666666666666666667 ,1.00000000000000000000 , 1.00000000000000000000 , 0.66666666666666666667 , 0.00000000000000000000 , 0.00000000000000000000 , 0.58333333333333333333 , 0.73076923076923076923 , 0.58823529411764705882),
(  0 ,  0 , 0.75000000000000000000 ,  8 ,  0 ,  4 , 14 , 0.66666666666666666667 ,1.00000000000000000000 , 1.00000000000000000000 , 0.77777777777777777778 , 0.00000000000000000000 , 0.00000000000000000000 , 0.33333333333333333333 , 0.84615384615384615385 , 0.80000000000000000000),
(  0 ,  0 , 0.62500000000000000000 ,  8 ,  3 ,  4 , 11 , 0.66666666666666666667 ,0.78571428571428571429 , 0.72727272727272727273 , 0.73333333333333333333 , 0.21428571428571428571 , 0.27272727272727272727 , 0.33333333333333333333 , 0.73076923076923076923 , 0.69565217391304347826),
(  0 ,  0 , 0.50000000000000000000 ,  9 ,  3 ,  3 , 11 , 0.75000000000000000000 ,0.78571428571428571429 , 0.75000000000000000000 , 0.78571428571428571429 , 0.21428571428571428571 , 0.25000000000000000000 , 0.25000000000000000000 , 0.76923076923076923077 , 0.75000000000000000000),
(  0 ,  0 , 0.37500000000000000000 , 11 ,  6 ,  1 ,  8 , 0.91666666666666666667 ,0.57142857142857142857 , 0.64705882352941176471 , 0.88888888888888888889 , 0.42857142857142857143 , 0.35294117647058823529 , 0.08333333333333333333 , 0.73076923076923076923 , 0.75862068965517241379),
(  0 ,  0 , 0.25000000000000000000 , 12 , 11 ,  0 ,  3 , 1.00000000000000000000 ,0.21428571428571428571 , 0.52173913043478260870 , 1.00000000000000000000 , 0.78571428571428571429 , 0.47826086956521739130 , 0.00000000000000000000 , 0.57692307692307692308 , 0.68571428571428571429),
(  0 ,  0 , 0.12500000000000000000 , 12 , 14 ,  0 ,  0 , 1.00000000000000000000 ,0.00000000000000000000 , 0.46153846153846153846 , NULL, 1.00000000000000000000 , 0.53846153846153846154 , 0.00000000000000000000 , 0.46153846153846153846 , 0.63157894736842105263),
(  1 ,  1 , 1.00000000000000000000 ,  2 ,  0 ,  7 , 14 , 0.22222222222222222222 ,1.00000000000000000000 , 1.00000000000000000000 , 0.66666666666666666667 , 0.00000000000000000000 , 0.00000000000000000000 , 0.77777777777777777778 , 0.69565217391304347826 , 0.36363636363636363636),
(  1 ,  1 , 0.87500000000000000000 ,  4 ,  0 ,  5 , 14 , 0.44444444444444444444 ,1.00000000000000000000 , 1.00000000000000000000 , 0.73684210526315789474 , 0.00000000000000000000 , 0.00000000000000000000 , 0.55555555555555555556 , 0.78260869565217391304 , 0.61538461538461538462),
(  1 ,  1 , 0.75000000000000000000 ,  4 ,  3 ,  5 , 11 , 0.44444444444444444444 ,0.78571428571428571429 , 0.57142857142857142857 , 0.68750000000000000000 , 0.21428571428571428571 , 0.42857142857142857143 , 0.55555555555555555556 , 0.65217391304347826087 , 0.50000000000000000000),
(  1 ,  1 , 0.62500000000000000000 ,  6 ,  3 ,  3 , 11 , 0.66666666666666666667 ,0.78571428571428571429 , 0.66666666666666666667 , 0.78571428571428571429 , 0.21428571428571428571 , 0.33333333333333333333 , 0.33333333333333333333 , 0.73913043478260869565 , 0.66666666666666666667),
(  1 ,  1 , 0.50000000000000000000 ,  7 ,  5 ,  2 ,  9 , 0.77777777777777777778 ,0.64285714285714285714 , 0.58333333333333333333 , 0.81818181818181818182 , 0.35714285714285714286 , 0.41666666666666666667 , 0.22222222222222222222 , 0.69565217391304347826 , 0.66666666666666666667),
(  1 ,  1 , 0.37500000000000000000 ,  8 ,  7 ,  1 ,  7 , 0.88888888888888888889 ,0.50000000000000000000 , 0.53333333333333333333 , 0.87500000000000000000 , 0.50000000000000000000 , 0.46666666666666666667 , 0.11111111111111111111 , 0.65217391304347826087 , 0.66666666666666666667),
(  1 ,  1 , 0.25000000000000000000 ,  8 ,  9 ,  1 ,  5 , 0.88888888888888888889 ,0.35714285714285714286 , 0.47058823529411764706 , 0.83333333333333333333 , 0.64285714285714285714 , 0.52941176470588235294 , 0.11111111111111111111 , 0.56521739130434782609 , 0.61538461538461538462),
(  1 ,  1 , 0.12500000000000000000 ,  9 , 12 ,  0 ,  2 , 1.00000000000000000000 ,0.14285714285714285714 , 0.42857142857142857143 , 1.00000000000000000000 , 0.85714285714285714286 , 0.57142857142857142857 , 0.00000000000000000000 , 0.47826086956521739130 , 0.60000000000000000000),
(  1 ,  1 , 0.00000000000000000000 ,  9 , 14 ,  0 ,  0 , 1.00000000000000000000 ,0.00000000000000000000 , 0.39130434782608695652 , NULL, 1.00000000000000000000 , 0.60869565217391304348 , 0.00000000000000000000 , 0.39130434782608695652 , 0.56250000000000000000);


SELECT
  assert(count(*)::TEXT,32::TEXT)
FROM out_table2_comparison c FULL JOIN out_table2 o
ON c.m1=o.m1 AND c.m2=o.m2 AND c.c_threshold=o.threshold;

SELECT
  assert(CASE WHEN (abs(tp-c_tp)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(fp-c_fp)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(fn-c_fn)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(tn-c_tn)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(tpr-c_tpr)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(tnr-c_tnr)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(ppv-c_ppv)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN ((npv IS NULL) AND (c_npv IS NULL)) OR (abs(npv-c_npv)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(fpr-c_fpr)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(fdr-c_fdr)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(fnr-c_fnr)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(acc-c_acc)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test'),
  assert(CASE WHEN (abs(f1-c_f1)<1E-10) THEN 't' ELSE 'f' END,'t','Assertion test')
FROM out_table2_comparison c FULL JOIN out_table2 o
ON c.m1=o.m1 AND c.m2=o.m2 AND c.c_threshold=o.threshold;

DROP TABLE binary_classifier, out_table, out_table2, auc_table, out_table_comparison, out_table2_comparison;

CREATE TABLE multi_class AS
  SELECT (x+y)%5+1 AS pred,
         (x*y)%5 AS obs
   FROM generate_series(1,5) x,
        generate_series(1,5) y
DISTRIBUTED RANDOMLY;

SELECT mf_confusion_matrix('multi_class','pred','obs','out_table');

CREATE TABLE comparison (cls integer, conf numeric[]) DISTRIBUTED BY (cls);

INSERT INTO comparison VALUES
(0,ARRAY[0,1,2,2,2,2]),
(1,ARRAY[0,2,0,1,1,0]),
(2,ARRAY[0,0,0,2,2,0]),
(3,ARRAY[0,0,2,0,0,2]),
(4,ARRAY[0,2,1,0,0,1]),
(5,ARRAY[0,0,0,0,0,0]);

SELECT
  assert(count(*)::TEXT,6::TEXT),
  assert(count(class)::TEXT,6::TEXT),
  assert(count(DISTINCT class)::TEXT,6::TEXT),
  assert(min(class)::TEXT,0::TEXT),
  assert(max(class)::TEXT,5::TEXT)
FROM out_table;

SELECT assert(array_to_string(conf,','),array_to_string(confusion_arr,','))
FROM out_table t, comparison c
WHERE class=cls;

DROP TABLE multi_class, out_table, comparison;

