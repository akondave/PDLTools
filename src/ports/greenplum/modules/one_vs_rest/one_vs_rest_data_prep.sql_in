/* ----------------------------------------------------------------------- *//**

@file one_vs_rest_data_prep.sql_in

@brief A utility function for preparing data for one-vs-rest multi-class classification

@author Written by Gautam Muralidhar
@date 03 Mar 2016

 *//* ----------------------------------------------------------------------- */

/**
@addtogroup grp_one_vs_rest

@brief Prepare multi-class classification data to build one-vs-rest classifiers

<div class="toc"><b>Contents</b>
<ul>
<li class="level1"><a href="#one_vs_rest_syntax">Syntax</a>
<li class="level1"><a href="#one_vs_rest_usage">Usage</a>
<li class="level1"><a href="#one_vs_rest_example">Example</a>
</ul>
</div>

@about
Prepare dataset for one-vs-rest multi-class classification

@anchor one_vs_rest_syntax
@par Syntax
<pre class="syntax">
FUNCTION one_vs_rest_data_prep(
          input_table text, 
          id_col text,
          label_col text,
          output_table text
       );
RETURNS TEXT;
</pre>

@param input_table A text field representing the name of the input table
@param id_col A text field representing the name of the ID column
@param label_col A text field representing name of the class label
@param output_table A text field representing the name of the output table
@returns A status message indicating success/failure.

@anchor one_vs_rest_usage
@usage
Given a table with multi-class labels (number of classes > 2), this function will replicate 
the data for building one-vs-rest classifiers. The function creates the output table that contains
a column called classifier_number, which is in the same order as the original class_label in the
source table. The number of distinct values that classifier_number assumes is equal to the 
number of distinct classes in the source table. For example, if the source table contains 4 
classes ('A','B',C', and 'D'), then the corresponding  classifier_number values will be 
(1, 2, 3, and 4). 

The column classifier_number is also the grouping column for building multiple one-vs-rest 
classifiers in subsequent steps. For each classifier_number, the new_class label will either
be 1 (for a specific source label) or 0. For example, for class labels 'A', 'B', 'C', and 'D', 
classifier_number 1 will correspond to the ('A' vs 'NOT A') classifier, with all records whose 
label were 'A' are now assigned to a new label '1' and all records whose label were not 'A' 
are now assigned to a new label '0'. Similarly classifier_numbers 2, 3, and 4 correspond to 
classifiers ('B' vs 'NOT B'), ('C' vs 'NOT C'), and ('D' vs 'NOT D'), respectively, with a 
similar binary (1 or 0) labeling scheme.

@anchor one_vs_rest_example
@examp
@verbatim

create table one_vs_rest_input (
    id int,
    label text,
    feature1 float8,
    feature2 float8,
    feature3 float8
) distributed by (id);

insert into one_vs_rest_input 
values 
(1,'A',-1,2,0),
(2,'A',-2,3,0.4),
(3,'A',-1.7,2.3,-0.01),
(4,'B',5.7,1.3,0.1),
(5,'B',4.9,1.9,2.1),
(6,'B',5.4,1.23,1.1),
(7,'B',6.1,2.4,-0.11),
(8,'C',2.1,-1.76,3.1),
(9,'C',1.8,-1.21,4.1),
(10,'D',1.1,-3.68,5.11),
(11,'D',0.8,-6.11,8.71),
(12,'D',0.9,-5.01,3.19);

select * from one_vs_rest_input order by id;
 id | label | feature1 | feature2 | feature3 
----+-------+----------+----------+----------
  1 | A     |       -1 |        2 |        0
  2 | A     |       -2 |        3 |      0.4
  3 | A     |     -1.7 |      2.3 |    -0.01
  4 | B     |      5.7 |      1.3 |      0.1
  5 | B     |      4.9 |      1.9 |      2.1
  6 | B     |      5.4 |     1.23 |      1.1
  7 | B     |      6.1 |      2.4 |    -0.11
  8 | C     |      2.1 |    -1.76 |      3.1
  9 | C     |      1.8 |    -1.21 |      4.1
 10 | D     |      1.1 |    -3.68 |     5.11
 11 | D     |      0.8 |    -6.11 |     8.71
 12 | D     |      0.9 |    -5.01 |     3.19
(12 rows)

select one_vs_rest_data_prep (
	'one_vs_rest_input',
	'id',
	'label',
	'one_vs_rest_output'
);
                        one_vs_rest_data_prep                         
----------------------------------------------------------------------
 One-vs-Rest data table created: one_vs_rest_output
(1 row)

select * from one_vs_rest_output order by classifier_number,src_id;;
 src_id | src_label | classifier_number | new_class_label 
--------+-----------+-------------------+-----------------
      1 | A         |                 1 |               1
      2 | A         |                 1 |               1
      3 | A         |                 1 |               1
      4 | B         |                 1 |               0
      5 | B         |                 1 |               0
      6 | B         |                 1 |               0
      7 | B         |                 1 |               0
      8 | C         |                 1 |               0
      9 | C         |                 1 |               0
     10 | D         |                 1 |               0
     11 | D         |                 1 |               0
     12 | D         |                 1 |               0
      1 | A         |                 2 |               0
      2 | A         |                 2 |               0
      3 | A         |                 2 |               0
      4 | B         |                 2 |               1
      5 | B         |                 2 |               1
      6 | B         |                 2 |               1
      7 | B         |                 2 |               1
      8 | C         |                 2 |               0
      9 | C         |                 2 |               0
     10 | D         |                 2 |               0
     11 | D         |                 2 |               0
     12 | D         |                 2 |               0
      1 | A         |                 3 |               0
      2 | A         |                 3 |               0
      3 | A         |                 3 |               0
      4 | B         |                 3 |               0
      5 | B         |                 3 |               0
      6 | B         |                 3 |               0
      7 | B         |                 3 |               0
      8 | C         |                 3 |               1
      9 | C         |                 3 |               1
     10 | D         |                 3 |               0
     11 | D         |                 3 |               0
     12 | D         |                 3 |               0
      1 | A         |                 4 |               0
      2 | A         |                 4 |               0
      3 | A         |                 4 |               0
      4 | B         |                 4 |               0
      5 | B         |                 4 |               0
      6 | B         |                 4 |               0
      7 | B         |                 4 |               0
      8 | C         |                 4 |               0
      9 | C         |                 4 |               0
     10 | D         |                 4 |               1
     11 | D         |                 4 |               1
     12 | D         |                 4 |               1
(48 rows)

@endverbatim

*/

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.one_vs_rest_data_prep(
         input_table text,
         id_col text,
         label_col text,
         output_table text
      )
RETURNS text
AS
$$
    import plpy;

    validation_query = '''
        select 
            count(distinct {label_col}) as num_labels 
        from 
            {input_table};
    '''.format(
        label_col=label_col,
        input_table=input_table
    )
    rv = plpy.execute(validation_query);
    if (rv[0]['num_labels'] <= 2):
        plpy.error('Function to be used only when number of distinct class labels > 2')
    
    one_vs_rest_query = '''
        create table {output_table} as (
            select
                src_id,
                src_label, -- labels used to describe the original class label (e.g., 'A', 'B', 'C', 'D')
                classifier_number, -- used to identify the classifier (e.g., classifier 1 = A vs. not A, 2 = B vs. not B, and so on)
                (classifier_number = label)::INT as new_class_label -- (e.g., in classifier 1, instances having label = A have class_label = 1, rest have class_label = 0)
            from (
                    select
                        t1.{id_col} as src_id,
                        t1.{label_col} as src_label,
                        gs as classifier_number,
                        q0.label
                    from
                        {input_table} t1,
                        (
                            select
                               labels,
                               dense_rank() over (order by labels) as label
                            from (
                                   select
                                       {label_col} as labels
                                   from
                                       {input_table}
                                   group by 1
                            )q01

                        )q0,
                        generate_series(
                            1,
                            (select count(distinct {label_col}) from {input_table})
                        ) gs
                    where
                        t1.{label_col} = q0.labels
            )q1
    ) distributed by (src_id);
    '''.format(
            input_table=input_table,
            label_col=label_col,
            id_col=id_col,
            output_table=output_table
        )
    plpy.execute(one_vs_rest_query)
    return 'One-vs-Rest data table created: {output_table}'.format(output_table=output_table)
$$ LANGUAGE PLPYTHONU;

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.one_vs_rest_data_prep()
RETURNS VARCHAR
IMMUTABLE
LANGUAGE SQL
AS
$$
SELECT $ABC$
one_vs_rest_data_prep: Given a table with multi-class labels (number of classes > 2),
this function will replicate the data for building one-vs-rest classifiers. The function
creates the output_table that contains a column called classifier_number, which is in
the same order as the original class_label in the source table. The number of distinct values 
that classifier_number assumes is equal to the number of distinct classes in the source table. 
For example, if the source table contains 4 classes ('A','B',C', and 'D'), then the corresponding  
classifier_number values will be (1, 2, 3, and 4). The column classifier_number is also the grouping 
column for building multiple one-vs-rest classifiers in subsequent steps. For each classifier_number, 
the new_class label will either be 1 (for a specific source label) or 0. For example, for class
labels 'A', 'B', 'C', and 'D',  classifier_number 1 will correspond to the ('A' vs 'NOT A')
classifier, with all records whose label was 'A' are now assigned to a new label '1' and all records
whose label was not 'A' are now assigned to a new label '0'. Similarly classifier_numbers 2, 3, and 4
correspond to classifiers ('B' vs 'NOT B'), ('C' vs 'NOT C'), and ('D' vs 'NOT D'), respectively,
with a similar binary (1 or 0) new labeling scheme.
For full usage instructions, run "PDLTOOLS_SCHEMA.one_vs_rest_data_prep('usage')".
$ABC$::VARCHAR;
$$;

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.one_vs_rest_data_prep(option VARCHAR)
RETURNS VARCHAR
IMMUTABLE
LANGUAGE SQL
AS
$$
SELECT CASE WHEN $1!='usage' THEN PDLTOOLS_SCHEMA.one_vs_rest_data_prep() ELSE
$ABC$

Synopsis
=========
PDLTOOLS_SCHEMA.one_vs_rest_data_prep(
	input_table text,
    id_col text,
    label_col text,
    output_table text
)
RETURNS TEXT;

Usage
======
Given a table with multi-class labels (number of classes > 2), this function will replicate the data for 
building one-vs-rest classifiers. 

The function creates the output_table that contains a column called classifier_number, which is in
the same order as the original class_label in the source table. The number of distinct values 
that classifier_number assumes is equal to the number of distinct classes in the source table. 
For example, if the source table contains 4 classes ('A','B',C', and 'D'), then the corresponding  
classifier_number values will be (1, 2, 3, and 4). 

The column classifier_number is also the grouping  column for building multiple one-vs-rest classifiers 
in subsequent steps. For each classifier_number, the new_class label will either be 1 (for a specific 
source label) or 0. For example, for class labels 'A', 'B', 'C', and 'D', classifier_number 1 will 
correspond to the ('A' vs 'NOT A') classifier, with all records whose label were 'A' are now assigned 
to a new label '1' and all records whose label were not 'A' are now assigned to a new label '0'. 
Similarly classifier_numbers 2, 3, and 4 correspond to classifiers ('B' vs 'NOT B'), ('C' vs 'NOT C'), 
and ('D' vs 'NOT D'), respectively.

The output_table created by this function can be joined with the input_table using the column src_id
(output_table.src_id = input_table.id_col) to complete the classifier data with feature columns.

Example
========

create table one_vs_rest_input (
    id int,
    label text,
    feature1 float8,
    feature2 float8,
    feature3 float8
) distributed by (id);

insert into one_vs_rest_input 
values 
(1,'A',-1,2,0),
(2,'A',-2,3,0.4),
(3,'A',-1.7,2.3,-0.01),
(4,'B',5.7,1.3,0.1),
(5,'B',4.9,1.9,2.1),
(6,'B',5.4,1.23,1.1),
(7,'B',6.1,2.4,-0.11),
(8,'C',2.1,-1.76,3.1),
(9,'C',1.8,-1.21,4.1),
(10,'D',1.1,-3.68,5.11),
(11,'D',0.8,-6.11,8.71),
(12,'D',0.9,-5.01,3.19);

select * from one_vs_rest_input order by id;
 id | label | feature1 | feature2 | feature3 
----+-------+----------+----------+----------
  1 | A     |       -1 |        2 |        0
  2 | A     |       -2 |        3 |      0.4
  3 | A     |     -1.7 |      2.3 |    -0.01
  4 | B     |      5.7 |      1.3 |      0.1
  5 | B     |      4.9 |      1.9 |      2.1
  6 | B     |      5.4 |     1.23 |      1.1
  7 | B     |      6.1 |      2.4 |    -0.11
  8 | C     |      2.1 |    -1.76 |      3.1
  9 | C     |      1.8 |    -1.21 |      4.1
 10 | D     |      1.1 |    -3.68 |     5.11
 11 | D     |      0.8 |    -6.11 |     8.71
 12 | D     |      0.9 |    -5.01 |     3.19
(12 rows)

select one_vs_rest_data_prep (
	'one_vs_rest_input',
	'id',
	'label',
	'one_vs_rest_output'
);
                        one_vs_rest_data_prep                         
----------------------------------------------------------------------
 One-vs-Rest data table created: one_vs_rest_output
(1 row)

select * from one_vs_rest_output order by classifier_number,src_id;;
 src_id | src_label | classifier_number | new_class_label 
--------+-----------+-------------------+-----------------
      1 | A         |                 1 |               1
      2 | A         |                 1 |               1
      3 | A         |                 1 |               1
      4 | B         |                 1 |               0
      5 | B         |                 1 |               0
      6 | B         |                 1 |               0
      7 | B         |                 1 |               0
      8 | C         |                 1 |               0
      9 | C         |                 1 |               0
     10 | D         |                 1 |               0
     11 | D         |                 1 |               0
     12 | D         |                 1 |               0
      1 | A         |                 2 |               0
      2 | A         |                 2 |               0
      3 | A         |                 2 |               0
      4 | B         |                 2 |               1
      5 | B         |                 2 |               1
      6 | B         |                 2 |               1
      7 | B         |                 2 |               1
      8 | C         |                 2 |               0
      9 | C         |                 2 |               0
     10 | D         |                 2 |               0
     11 | D         |                 2 |               0
     12 | D         |                 2 |               0
      1 | A         |                 3 |               0
      2 | A         |                 3 |               0
      3 | A         |                 3 |               0
      4 | B         |                 3 |               0
      5 | B         |                 3 |               0
      6 | B         |                 3 |               0
      7 | B         |                 3 |               0
      8 | C         |                 3 |               1
      9 | C         |                 3 |               1
     10 | D         |                 3 |               0
     11 | D         |                 3 |               0
     12 | D         |                 3 |               0
      1 | A         |                 4 |               0
      2 | A         |                 4 |               0
      3 | A         |                 4 |               0
      4 | B         |                 4 |               0
      5 | B         |                 4 |               0
      6 | B         |                 4 |               0
      7 | B         |                 4 |               0
      8 | C         |                 4 |               0
      9 | C         |                 4 |               0
     10 | D         |                 4 |               1
     11 | D         |                 4 |               1
     12 | D         |                 4 |               1
(48 rows)

$ABC$
END;
$$;


