-----------------------------------------------------------------------
--  Test cases for the Complex number module
----------------------------------------------------------------------

CREATE SEQUENCE complex_seq;
CREATE TABLE complex_ttbl (id INTEGER NOT NULL DEFAULT 1, orderid INTEGER NOT NULL DEFAULT NEXTVAL('complex_seq'), c COMPLEX) DISTRIBUTED BY (id); 
-- regular input
INSERT INTO complex_ttbl(c) VALUES (' 5');
INSERT INTO complex_ttbl(c) VALUES ('3 ');
INSERT INTO complex_ttbl(c) VALUES (' 6 ');
INSERT INTO complex_ttbl(c) VALUES (' -6 ');
INSERT INTO complex_ttbl(c) VALUES (' 5i');
INSERT INTO complex_ttbl(c) VALUES ('3i ');
INSERT INTO complex_ttbl(c) VALUES (' 6i ');
INSERT INTO complex_ttbl(c) VALUES (' -6i ');
INSERT INTO complex_ttbl(c) VALUES (' 5 + 3i ');
INSERT INTO complex_ttbl(c) VALUES (' 5 + -3i ');
INSERT INTO complex_ttbl(c) VALUES (' 6 - -7i ');
INSERT INTO complex_ttbl(c) VALUES (' -6 - -7i ');
INSERT INTO complex_ttbl(c) VALUES (' 1.2345678901234e+200  - -1.2345678901234e+200i ');
INSERT INTO complex_ttbl(c) VALUES (' -0 + -0i ');
INSERT INTO complex_ttbl(c) VALUES (' -0 - -0i ');
INSERT INTO complex_ttbl(c) VALUES (' -0 - 0i ');
INSERT INTO complex_ttbl(c) VALUES ('9+10i ');
INSERT INTO complex_ttbl(c) VALUES (' 9+10i');
INSERT INTO complex_ttbl(c) VALUES ('9-10i');
  
-- re
SELECT assert(re(COMPLEX(5, 3)),5);
SELECT assert(re(COMPLEX(-5, 3)),-5);
SELECT assert(re(COMPLEX(5.1, 3)),5.1);
SELECT assert(re(COMPLEX(-5.1, 3)),-5.1);

-- im
SELECT assert(im(COMPLEX(5, 3)),3);
SELECT assert(im(COMPLEX(-5, -3)),-3);
SELECT assert(im(COMPLEX(5.1, 3.1)),3.1);
SELECT assert(im(COMPLEX(-5.1, -3.1)),-3.1);

-- abs
SELECT assert(abs(COMPLEX(4, 3)),5); 
SELECT assert(abs(COMPLEX(4, -3)),5); 
SELECT assert(abs(COMPLEX('infinity', 3)),'Infinity');
SELECT assert(abs(COMPLEX('nan', 3)), 'NaN');

-- radians
SELECT assert(abs(radians(COMPLEX(1, sqrt(3))) - pi()/3) < 1e-6, True);
SELECT assert(abs(radians(COMPLEX(1, -sqrt(3))) + pi()/3) < 1e-6, True);
SELECT assert(abs(radians(COMPLEX(-1, sqrt(3))) - pi()*2/3) < 1e-6, True);
SELECT assert(abs(radians(COMPLEX(-1, -sqrt(3))) + pi()*2/3) < 1e-6, True);

SELECT assert(radians(COMPLEX('infinity', 3)), 0);
SELECT assert(abs(radians(COMPLEX('-infinity', 3)) - pi()) < 1e-6, True);
SELECT assert(abs(radians(COMPLEX(5, 'infinity')) - pi()/2) < 1e-6, True);
SELECT assert(abs(radians(COMPLEX(5, '-infinity')) + pi()/2) < 1e-6, True);
SELECT assert(abs(radians(COMPLEX('infinity', 'infinity')) - pi()*45/180) < 1e-6, True);
SELECT assert(radians(COMPLEX('nan', 3)), 'NaN');
SELECT assert(radians(COMPLEX('-nan', 3)), 'NaN');
SELECT assert(radians(COMPLEX(5, 'nan')), 'NaN');
SELECT assert(radians(COMPLEX(5, '-nan')), 'NaN');
SELECT assert(radians(COMPLEX('nan', 'nan')), 'NaN');
SELECT assert(radians(COMPLEX('infinity', 'nan')), 'NaN');
SELECT assert(radians(COMPLEX('nan', 'infinity')),'NaN'); 

-- conj
SELECT assert(conj(COMPLEX(5,3)) = COMPLEX(5,-3),True);
SELECT assert(conj(COMPLEX(5,-3)) = COMPLEX(5,3),True);

-- not equal
SELECT assert(NOT c != c, True) FROM complex_ttbl;

-- unary plus
SELECT assert(+(COMPLEX(5, 3)) = COMPLEX(5, 3), True);
SELECT assert(+(COMPLEX(-5, 3)) = COMPLEX(-5, 3), True);

-- unary minus
SELECT assert(-(COMPLEX(5, 3)) = COMPLEX(-5, -3), True);
SELECT assert(-(COMPLEX(-5, 3)) = COMPLEX(5, -3), True);
SELECT assert(-(COMPLEX(5.1, 3)) = COMPLEX(-5.1, -3), True);
SELECT assert(-(COMPLEX(-5.1, 3)) = COMPLEX(5.1, -3), True);

-- plus
SELECT assert(COMPLEX(3, 5) + COMPLEX(6, 7) = COMPLEX(9,12), True);

-- minus
SELECT assert(COMPLEX(3, 5) - COMPLEX(6, 7) = COMPLEX(-3, -2), True);

-- multiply
SELECT assert(COMPLEX(3, 5) * COMPLEX(6, 7) = COMPLEX(-17, 51), True);


-- divide
CREATE OR REPLACE FUNCTION complex_dp_eq(a COMPLEX, b COMPLEX, diff FLOAT8) RETURNS BOOLEAN AS $$
BEGIN
	RETURN (abs(re(a) - re(b)) < diff) AND (abs(im(a) - im(b)) < diff);
END;
$$ LANGUAGE PLPGSQL IMMUTABLE STRICT;

SELECT assert(COMPLEX(2,2)/COMPLEX(1,1) = COMPLEX(2,0), True);
SELECT assert(COMPLEX(3, 'infinity') / COMPLEX(6, 7) = COMPLEX('infinity', 'infinity'), True);
SELECT assert(COMPLEX(3, 'nan') / COMPLEX(6, 7) = COMPLEX('nan', 'nan'), True);

-- @
SELECT assert(@(COMPLEX(5,3)) = abs(COMPLEX(5,3)), True);

-- pow and ^
SELECT assert(complex_dp_eq(COMPLEX(1,sqrt(3))^3 , COMPLEX(-1*2^3, 0), 1e-6), True);
SELECT assert(complex_dp_eq(COMPLEX(0.5, 0.5*sqrt(3))^0.5, COMPLEX(0.5*sqrt(3), 0.5), 1e-6), True);
SELECT assert(COMPLEX(5,3)^0 = COMPLEX(1,0), True);

-- sqrt
SELECT assert(sqrt(COMPLEX(5,3)) = COMPLEX(5,3)^0.5, True);

-- cbrt
SELECT assert(cbrt(COMPLEX(5,3)) = COMPLEX(5,3)^(1.0/3), True);

-- degrees
SELECT assert(degrees(COMPLEX(5,3)) = degrees(radians(COMPLEX(5,3))), True);

-- exp
SELECT assert(complex_dp_eq(exp(COMPLEX(5,3)), COMPLEX(-146.927913908319 , 20.944066208746), 1e-6), True);

-- ln
SELECT assert(complex_dp_eq(ln(COMPLEX(5,3)), COMPLEX(1.76318026230808 , 0.540419500270584), 1e-6), True);
SELECT assert(complex_dp_eq(exp(ln(COMPLEX(5,3))), COMPLEX(5,3), 1e-6), True);
SELECT assert(ln('0'::COMPLEX)=COMPLEX('-infinity', 0),True);

-- log10
SELECT assert(complex_dp_eq(log(COMPLEX(5,3)) , ln(COMPLEX(5,3))/ln(10), 1e-6), True);

-- log
SELECT assert(complex_dp_eq(log(COMPLEX(3,5),COMPLEX(5,3)) , ln(COMPLEX(5,3))/ln(COMPLEX(3,5)), 1e-6), True);

-- acos
SELECT assert(complex_dp_eq(acos(COMPLEX(5,3)), COMPLEX(0, -1)*ln(COMPLEX(5,3) + COMPLEX(0,1)*sqrt(1 - COMPLEX(5,3)^2)), 1e-6), True);

-- asin
SELECT assert(complex_dp_eq(asin(COMPLEX(5,3)), COMPLEX(0, -1)*ln(COMPLEX(5,3)*COMPLEX(0,1) + sqrt(1 - COMPLEX(5,3)^2)), 1e-6), True);

-- atan
SELECT assert(complex_dp_eq(atan(COMPLEX(5,3)), 0.5*COMPLEX(0,1)*(ln(1 - COMPLEX(5,3)*COMPLEX(0,1)) - ln(1 + COMPLEX(5,3)*COMPLEX(0,1))), 1e-6), True);

-- cos
SELECT assert(complex_dp_eq(cos(COMPLEX(5,3)), COMPLEX( 2.85581500422739 , 9.60638344843258), 1e-6), True);

-- sin
SELECT assert(complex_dp_eq(sin(COMPLEX(5,3)), COMPLEX(-9.65412547685484 , 2.84169229560635), 1e-6), True);

-- cot
SELECT assert(complex_dp_eq(cot(COMPLEX(5,3)), cos(COMPLEX(5,3))/sin(COMPLEX(5,3)), 1e-6), True);

-- tan
SELECT assert(complex_dp_eq(tan(COMPLEX(5,3)), sin(COMPLEX(5,3))/cos(COMPLEX(5,3)), 1e-6), True);

-- type cast
SELECT assert(COMPLEX '5+3i' ^ '4'::int2 = COMPLEX(5,3)^('4'::COMPLEX), TRUE);
SELECT assert(COMPLEX '5+3i' ^ '4'::INT4 = COMPLEX(5,3)^('4'::COMPLEX), TRUE);
SELECT assert(COMPLEX '5+3i' ^ '4'::INT8 = COMPLEX(5,3)^('4'::COMPLEX), TRUE);
SELECT assert(COMPLEX '5+3i' ^ '4' = COMPLEX(5,3)^('4'::COMPLEX), TRUE);
SELECT assert(COMPLEX '5+3i' ^ '4.5'::FLOAT4 = COMPLEX(5,3)^COMPLEX(4.5,0), TRUE);
SELECT assert(COMPLEX '5+3i' ^ '4.5'::FLOAT8 = COMPLEX(5,3)^COMPLEX(4.5,0), TRUE);

-- dot product
SELECT assert(dotproduct(ARRAY[COMPLEX(1,3),COMPLEX(5,7)], ARRAY[COMPLEX(2,4),COMPLEX(6,8)]) = COMPLEX(1,3)*COMPLEX(2,4) + COMPLEX(5,7)*COMPLEX(6,8), True);

