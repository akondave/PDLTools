
/* ----------------------------------------------------------------------- *//**

@file edit_distance.sql_in

@brief Implementation of Levenshtein, Demerau-Levenshtein, Optimal Alighment
       and related edit distance metrics (and non-distance metrics).

@author Written by Michael Brand
@date 19 Feb 2014

 *//* ----------------------------------------------------------------------- */

/**
@addtogroup grp_edit_distance

@brief An edit distance calculator.

<div class="toc"><b>Contents</b>
<ul>
<li class="level1"><a href="#edit_distance_syntax">Syntax</a>
<li class="level1"><a href="#edit_distance_usage">Usage</a>
<li class="level1"><a href="#edit_distance_example">Example</a>
</ul>
</div>

@about
A row function, taking two strings and calculating their edit distance.
Costs for various edit operations, including the transposition of
characters that are adjacent in both the input and output, are user-defined.
This function is "safe" in the sense that it verifies certain assumptions
about the user-defined costs and throws an exception if they do not hold
true, rather than returning an erroneous value. See
<A HREF="#edit_distance_usage">"Usage"</A> for a
complete list of these assumptions.

@anchor edit_distance_syntax
@par Syntax
<pre class="syntax">
FUNCTION edit_distance(str1 text, str2 text,
                    ins_cost integer, del_cost integer, sub_cost integer,
                    tp_cost integer, final_tp_cost integer,
                    spec_sub_cost integer, spec_sub_from text, spec_sub_to text)
RETURNS integer;
</pre>
<pre class="syntax">
FUNCTION edit_distance(str1 text, str2 text,
                    ins_cost integer, del_cost integer, sub_cost integer,
                    tp_cost integer, final_tp_cost integer)
RETURNS integer;
</pre>
<pre class="syntax">
FUNCTION edit_distance(str1 text, str2 text,
                       ins_cost integer, del_cost integer, sub_cost integer,
                       tp_cost integer)
RETURNS integer;
</pre>

@param str1, str2 The two strings to be compared.
                  Edits make \a str1 into \a str2.
@param ins_cost   Cost to insert a character.
@param del_cost   Cost to delete a character.
@param sub_cost   Cost to substitute a character by another.
@param tp_cost    Cost to transpose two adjacent characters.
@param final_tp_cost Cost to transpose two adjacent characters, on the
               assumption that no other transformation occurs on these
               characters or anything between them throughout the editing
               process.
@param spec_sub_cost Cost for special substitution.
@param spec_sub_from String giving the "from" list for substitution of
               characters that receives special weighing \a spec_sub_cost.
@param spec_sub_to String with "to" list corresponding to the previous
               "from".

@returns The edit distance.

@anchor edit_distance_usage
@usage
Given two strings, \a str1 and \a str2, it is possible to transform the former into
the latter by a sequence of edit operations such as insertion of a new
character, deletion of an existing character, substitution of one character by
another and transposition of the order of two adjacent characters.

Suppose that each one of these operations is associated with a cost
(in the form of a nonnegative integer), then the cost of a sequence of
operations can be measured as the sum of the costs of its individual parts.

There may be many sequences transforming \a str1 to \a str2, each with its own
cost. The minimum of these costs is called the "edit distance" from \a str1
to \a str2.

The particular edit distance implementation given here allows each one of the
operations discussed above to be assigned a cost. Furthermore, one can
assign the following special costs:

  - \a final_tp_cost is the cost of transposing two adjacent characters, given that these characters are at no point involved in any other type of operation.
  - \a spec_sub_cost is the cost of making a character-to-character substitution that is one of a special list of substitutions defined by \a spec_sub_from and \a spec_sub_to. A substitution is "special" if it takes the <em>i</em>'th character in \a spec_sub_from and transforms it to the <em>i</em>'th character in \a spec_sub_to. For example, if <code>spec_sub_from="OI"</code> and <code>spec_sub_to="01"</code>, then the list of special substitutions is the list of common character to numeral substitutions, namely the transformation of an <code>"O"</code> to a <code>"0"</code> and of an <code>"I"</code> to a <code>"1"</code>. Note that the list is directional and case sensitive. So, for example, the above does not cover <code>"o"</code>-to-<code>"0"</code> or <code>"0"</code>-to-<code>"O"</code> substitutions. If we had wanted to include these, they would have had to be added to the list explicitly.

The function makes the following assumptions:
  - All costs are assumed to be nonnegative.
  - \f$\textit{final\_tp\_cost} \le \textit{tp\_cost}\f$.
  - \f$\textit{ins\_cost}+\textit{del\_cost} \le 2\textit{final\_tp\_cost}\f$.
  - \f$\max(\textit{sub\_cost},\textit{special\_sub\_cost}) \le \textit{final\_tp\_cost}\f$.

When these assumptions are voided, an exception is thrown.

@note Even though we use the term "distance", the result is not
necessarily a distance metric. It is only a distance metric if all of the
following conditions hold:
  -# \f$\textit{final\_tp\_cost} = \textit{tp\_cost}\f$;
  -# \f$\textit{ins\_cost} = \textit{del\_cost}\f$; and
  -# the \c spec_sub_from and \c spec_sub_to lists are symmetric.

The variants of \c edit_distance that accept less parameters are equivalent
to the long-form \c edit_distance, except for the fact that some
operations (such as special substitution) cannot be used. The user can reach
the same effect (although, perhaps with reduced run-time efficiency) by
assigning to these operations sufficiently high costs.

For example, a user can make sure that the only type of transpositions used
are "final" transpositions by assigning to \a tp_cost the value
<code>length(str1)*del_cost+length(str2)*ins_cost</code>. Because there is always an
insertion-deletion path from \a str1 to \a str2 of that cost, assigning this as the
cost for a single transposition ensures that the optimal path from \a str1 to
\a str2 can always be found without any use of a non-final transpositon.

@anchor edit_distance_example
@examp
@verbatim
user=# SELECT edit_distance('demerau','levenshtein',1,1,1,1,1,1,'01OIIL','OI01LI');

 edit_distance
---------------
             9
(1 row)
@endverbatim

@sa grp_edit_distance_unsafe

 */

/**
@addtogroup grp_edit_distance_unsafe

@brief An edit distance calculator.

<div class="toc"><b>Contents</b>
<ul>
<li class="level1"><a href="#edit_distance_unsafe_syntax">Syntax</a>
<li class="level1"><a href="#edit_distance_unsafe_usage">Usage</a>
<li class="level1"><a href="#edit_distance_unsafe_example">Example</a>
</ul>
</div>

@about
A row function, taking two strings and calculating their edit distance.
Costs for various edit operations, including the transposition of
characters that are adjacent in both the input and output, are user-defined.
This function is "unsafe" in the sense that it assumes certain qualities
about the user-defined costs without checking them. See
<A HREF="#edit_distance_unsafe_usage">"Usage"</A> for a
complete list of these assumptions.

@anchor edit_distance_unsafe_syntax
@par Syntax
<pre class="syntax">
FUNCTION edit_distance_unsafe(str1 text, str2 text,
                    ins_cost integer, del_cost integer, sub_cost integer,
                    tp_cost integer, final_tp_cost integer,
                    spec_sub_cost integer, spec_sub_from text, spec_sub_to text)
RETURNS integer;
</pre>
<pre class="syntax">
FUNCTION edit_distance_unsafe(str1 text, str2 text,
                    ins_cost integer, del_cost integer, sub_cost integer,
                    tp_cost integer, final_tp_cost integer)
RETURNS integer;
</pre>
<pre class="syntax">
FUNCTION edit_distance_unsafe(str1 text, str2 text,
                    ins_cost integer, del_cost integer, sub_cost integer,
                    tp_cost integer)
RETURNS integer;
</pre>

@param str1, str2 The two strings to be compared.
                  Edits make \a str1 into \a str2.
@param ins_cost   Cost to insert a character.
@param del_cost   Cost to delete a character.
@param sub_cost   Cost to substitute a character by another.
@param tp_cost    Cost to transpose two adjacent characters.
@param final_tp_cost Cost to transpose two adjacent characters, on the
               assumption that no other transformation occurs on these
               characters or anything between them throughout the editing
               process.
@param spec_sub_cost Cost for special substitution.
@param spec_sub_from String giving the "from" list for substitution of
               characters that receives special weighing \a spec_sub_cost.
@param spec_sub_to String with "to" list corresponding to the previous
               "from".

@returns The edit distance.

@anchor edit_distance_unsafe_usage
@usage
Given two strings, \a str1 and \a str2, it is possible to transform the former into
the latter by a sequence of edit operations such as insertion of a new
character, deletion of an existing character, substitution of one character by
another and transposition of the order of two adjacent characters.

Suppose that each one of these operations is associated with a cost
(in the form of a nonnegative integer), then the cost of a sequence of
operations can be measured as the sum of the costs of its individual parts.

There may be many sequences transforming \a str1 to \a str2, each with its own
cost. The minimum of these costs is called the "edit distance" from \a str1
to \a str2.

The particular edit distance implementation given here allows each one of the
operations discussed above to be assigned a cost. Furthermore, one can
assign the following special costs:

  - \a final_tp_cost is the cost of transposing two adjacent characters, given that these characters are at no point involved in any other type of operation.
  - \a spec_sub_cost is the cost of making a character-to-character substitution that is one of a special list of substitutions defined by \a spec_sub_from and \a spec_sub_to. A substitution is "special" if it takes the <em>i</em>'th character in \a spec_sub_from and transforms it to the <em>i</em>'th character in \a spec_sub_to. For example, if <code>spec_sub_from="OI"</code> and <code>spec_sub_to="01"</code>, then the list of special substitutions is the list of common character to numeral substitutions, namely the transformation of an <code>"O"</code> to a <code>"0"</code> and of an <code>"I"</code> to a <code>"1"</code>. Note that the list is directional and case sensitive. So, for example, the above does not cover <code>"o"</code>-to-<code>"0"</code> or <code>"0"</code>-to-<code>"O"</code> substitutions. If we had wanted to include these, they would have had to be added to the list explicitly.

The function makes the following assumptions:
  - All costs are assumed to be nonnegative.
  - \f$\textit{final\_tp\_cost} \le \textit{tp\_cost}\f$.
  - \f$\textit{ins\_cost}+\textit{del\_cost} \le 2\textit{final\_tp\_cost}\f$.
  - \f$\max(\textit{sub\_cost},\textit{special\_sub\_cost}) \le \textit{final\_tp\_cost}\f$.

When these assumptions are voided, the result may be incorrect.

@note Even though we use the term "distance", the result is not
necessarily a distance metric. It is only a distance metric if all of the
following conditions hold:
  -# \f$\textit{final\_tp\_cost} = \textit{tp\_cost}\f$;
  -# \f$\textit{ins\_cost} = \textit{del\_cost}\f$; and
  -# the \c spec_sub_from and \c spec_sub_to lists are symmetric.

The variants of \c edit_distance_unsafe that accept less parameters are equivalent
to the long-form \c edit_distance_unsafe, except for the fact that some
operations (such as special substitution) cannot be used. The user can reach
the same effect (although, perhaps with reduced run-time efficiency) by
assigning to these operations sufficiently high costs.

For example, a user can make sure that the only type of transpositions used
are "final" transpositions by assigning to \a tp_cost the value
<code>length(str1)*del_cost+length(str2)*ins_cost</code>. Because there is always an
insertion-deletion path from \a str1 to \a str2 of that cost, assigning this as the
cost for a single transposition ensures that the optimal path from \a str1 to
\a str2 can always be found without any use of a non-final transpositon.

@anchor edit_distance_unsafe_example
@examp
@verbatim
user=# SELECT edit_distance_unsafe('demerau','levenshtein',1,1,1,
                                   1,1,1,'01OIIL','OI01LI');

 edit_distance_unsafe
----------------------
                    9
(1 row)
@endverbatim

@sa grp_edit_distance

 */

------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.edit_distance_unsafe(
           str1 text, 
           str2 text,
           ins_cost integer, 
           del_cost integer, 
           sub_cost integer,
           tp_cost integer, 
           final_tp_cost integer,
           spec_sub_cost integer, 
           spec_sub_from text, 
           spec_sub_to text
         )
RETURNS integer
AS 'MODULE_PATHNAME', 'edit_distance_unsafe13'
LANGUAGE C IMMUTABLE STRICT;

------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.edit_distance(
	   str1 text, 
           str2 text,
           ins_cost integer, 
           del_cost integer, 
           sub_cost integer,
           tp_cost integer, 
           final_tp_cost integer,
           spec_sub_cost integer, 
           spec_sub_from text, 
           spec_sub_to text
          )
RETURNS integer
AS 'MODULE_PATHNAME','edit_distance13'
LANGUAGE C IMMUTABLE STRICT;

------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.edit_distance_unsafe(
           str1 text, str2 text,
           ins_cost integer, del_cost integer, sub_cost integer,
           tp_cost integer, final_tp_cost integer)
RETURNS integer
AS 'MODULE_PATHNAME',
   'edit_distance_unsafe9'
LANGUAGE C IMMUTABLE STRICT;

------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.edit_distance(str1 text, str2 text,
           ins_cost integer, del_cost integer, sub_cost integer,
           tp_cost integer, final_tp_cost integer)
RETURNS integer
AS 'MODULE_PATHNAME',
   'edit_distance9'
LANGUAGE C IMMUTABLE STRICT;

------------------------------------------------------------------------


CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.edit_distance_unsafe(
           str1 text, str2 text,
           ins_cost integer, del_cost integer, sub_cost integer,
           tp_cost integer)
RETURNS integer
AS 'MODULE_PATHNAME',
   'edit_distance_unsafe8'
LANGUAGE C IMMUTABLE STRICT;

------------------------------------------------------------------------


CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.edit_distance(str1 text, str2 text,
           ins_cost integer, del_cost integer, sub_cost integer,
           tp_cost integer)
RETURNS integer
AS 'MODULE_PATHNAME',
   'edit_distance8'
LANGUAGE C IMMUTABLE STRICT;

------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.edit_distance(str1 text, str2 text,
           ins_cost integer, del_cost integer, sub_cost integer)
RETURNS integer
AS 'MODULE_PATHNAME',
   'edit_distance7'
LANGUAGE C IMMUTABLE STRICT;

------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.edit_distance(
            str1 text, 
            str2 text,
            ins_cost integer, 
            del_cost integer
          )
RETURNS integer
AS 'MODULE_PATHNAME','edit_distance6'
LANGUAGE C IMMUTABLE STRICT;

------------------------------------------------------------------------

/**
@addtogroup grp_levenshtein_distance

@brief A Levenshtein distance calculator.

<div class="toc"><b>Contents</b>
<ul>
<li class="level1"><a href="#levenshtein_distance_syntax">Syntax</a>
<li class="level1"><a href="#levenshtein_distance_usage">Usage</a>
<li class="level1"><a href="#levenshtein_distance_example">Example</a>
</ul>
</div>

@about
A row function, taking two strings and calculating their Levenshtein distance.

@anchor levenshtein_distance_syntax
@par Syntax
<pre class="syntax">
FUNCTION levenshtein_distance(str1 text, str2 text)
RETURNS integer;
</pre>

@param str1, str2 The two strings to be compared.
                  Edits make \a str1 into \a str2.

@returns The Levenshtein distance between the two strings.

@anchor levenshtein_distance_usage
@usage
Given two strings, \a str1 and \a str2, it is possible to transform the former into
the latter by a sequence of character insertions,
deletions and substitutions.

The Levenshtein distance is the minimum number of such edit operations that
is required to make \a str1 into \a str2.

@anchor levenshtein_distance_example
@examp
@verbatim
user=# SELECT levenshtein_distance('demerau','levenshtein');

 levenshtein_distance
----------------------
                    9
(1 row)
@endverbatim

@sa grp_demerau_levenshtein_distance, grp_optimal_alignment_distance

 */

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.levenshtein_distance(
         str1 text, 
         str2 text
       )
RETURNS integer
AS 'MODULE_PATHNAME','levenshtein_distance'
LANGUAGE C IMMUTABLE STRICT;

/**
@addtogroup grp_demerau_levenshtein_distance

@brief A Demerau-Levenshtein distance calculator.

<div class="toc"><b>Contents</b>
<ul>
<li class="level1"><a href="#demerau_levenshtein_distance_syntax">Syntax</a>
<li class="level1"><a href="#demerau_levenshtein_distance_usage">Usage</a>
<li class="level1"><a href="#demerau_levenshtein_distance_example">Example</a>
</ul>
</div>

@about
A row function, taking two strings and calculating their Demerau-Levenshtein
distance.

@anchor demerau_levenshtein_distance_syntax
@par Syntax
<pre class="syntax">
FUNCTION demerau_levenshtein_distance(str1 text, str2 text)
RETURNS integer;
</pre>

@param str1, str2 The two strings to be compared.
                  Edits make \a str1 into \a str2.

@returns The Demerau-Levenshtein distance between the two strings.

@anchor demerau_levenshtein_distance_usage
@usage
Given two strings, \a str1 and \a str2, it is possible to transform the former into
the latter by a sequence of character insertions,
deletions, substitutions and transposition of pairs of adjacent characters.

The Demerau-Levenshtein distance is the minimum number of such edit operations
that is required to make \a str1 into \a str2.

@anchor demerau_levenshtein_distance_example
@examp
@verbatim
user=# SELECT demerau_levenshtein_distance('demerau','levenshtein');

 demerau_levenshtein_distance
------------------------------
                            9
(1 row)
@endverbatim

@sa grp_levenshtein_distance, grp_optimal_alignment_distance

 */

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.demerau_levenshtein_distance(
         str1 text, 
         str2 text
       )
RETURNS integer
AS 'MODULE_PATHNAME','demerau_levenshtein_distance'
LANGUAGE C IMMUTABLE STRICT;

/**
@addtogroup grp_optimal_alignment_distance

@brief An Optimal Alignment distance calculator.

<div class="toc"><b>Contents</b>
<ul>
<li class="level1"><a href="#optimal_alignment_distance_syntax">Syntax</a>
<li class="level1"><a href="#optimal_alignment_distance_usage">Usage</a>
<li class="level1"><a href="#optimal_alignment_distance_example">Example</a>
</ul>
</div>

@about
A row function, taking two strings and calculating their Optimal Alignment
distance.

@anchor optimal_alignment_distance_syntax
@par Syntax
<pre class="syntax">
FUNCTION optimal_alignment_distance(str1 text, str2 text)
RETURNS integer;
</pre>

@param str1, str2 The two strings to be compared.
                  Edits make \a str1 into \a str2.

@returns The Optimal Alignment distance between the two strings.

@anchor optimal_alignment_distance_usage
@usage
Given two strings, \a str1 and \a str2, it is possible to transform the former into
the latter by a sequence of character insertions,
deletions, substitutions and the transposition of pairs of adjacent characters,
under the restriction that characters that were once transposed can no longer
undergo any further edit operation.

The Optimal Alignment distance is the minimum number of such edit operations
that is required to make \a str1 into \a str2.

@anchor optimal_alignment_distance_example
@examp
@verbatim
user=# SELECT optimal_alignment_distance('demerau','levenshtein');

 optimal_alignment_distance
----------------------------
                          9
(1 row)
@endverbatim

@sa grp_levenshtein_distance, grp_demerau_levenshtein_distance

 */

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.optimal_alignment_distance(str1 text, str2 text)
RETURNS integer
AS 'MODULE_PATHNAME','optimal_alignment_distance'
LANGUAGE C IMMUTABLE STRICT;

------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.edit_distance_unsafe()
RETURNS VARCHAR
IMMUTABLE
LANGUAGE SQL
AS
$$
SELECT '
edit_distance_unsafe: an edit distance calculator.

A row function, taking two strings and calculating their edit distance.
Costs for various edit operations, including the transposition of
characters that are adjacent in both the input and output, are user-defined.
This function is "unsafe" in the sense that it assumes certain qualities
about the user-defined costs without checking them.

For full usage instructions, run "PDLTOOLS_SCHEMA.edit_distance_unsafe(''usage'')".
'::VARCHAR;
$$;

-------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.edit_distance_unsafe(option VARCHAR)
RETURNS VARCHAR
IMMUTABLE
LANGUAGE SQL
AS
$$
SELECT CASE WHEN $1!='usage' THEN PDLTOOLS_SCHEMA.edit_distance_unsafe() ELSE '
edit_distance_unsafe: an edit distance calculator.

A row function, taking two strings and calculating their edit distance.
Costs for various edit operations, including the transposition of
characters that are adjacent in both the input and output, are user-defined.
This function is "unsafe" in the sense that it assumes certain qualities
about the user-defined costs without checking them. See "Usage" for a
complete list of these assumptions.

Synopsis
========
PDLTOOLS_SCHEMA.edit_distance_unsafe(str1 text, str2 text,
           ins_cost integer, del_cost integer, sub_cost integer,
           tp_cost integer, final_tp_cost integer,
           spec_sub_cost integer, spec_sub_from text, spec_sub_to text)
RETURNS integer

PDLTOOLS_SCHEMA.edit_distance_unsafe(str1 text, str2 text,
           ins_cost integer, del_cost integer, sub_cost integer,
           tp_cost integer, final_tp_cost integer)
RETURNS integer

PDLTOOLS_SCHEMA.edit_distance_unsafe(str1 text, str2 text,
           ins_cost integer, del_cost integer, sub_cost integer,
           tp_cost integer)
RETURNS integer

str1, str2 - the two strings to be compared. Edits make str1 into str2.
ins_cost - cost to insert a character.
del_cost - cost to delete a character.
sub_cost - cost to substitute a character by another.
tp_cost - cost to transpose two adjacent characters.
final_tp_cost - cost to transpose two adjacent characters, on the assumption
                that no other transformation occurs on these characters or
                anything between them throughout the editing process.
spec_sub_cost - cost for special substitution.
spec_sub_from - string giving the "from" list for substitution of characters
                that receives special weighing spec_sub_cost.
spec_sub_to - string with "to" list corresponding to the previous "from".

Returns the edit distance.

Usage
=====
Given two strings, str1 and str2, it is possible to transform the former into
the latter by a sequence of edit operations such as insertion of a new
character, deletion of an existing character, substitution of one character by
another and transposition of the order of two adjacent characters.

Suppose that each one of these operations is associated with a cost
(in the form of a nonnegative integer), then the cost of a sequence of
operations can be measured as the sum of the costs of its individual parts.

There may be many sequences transforming str1 to str2, each with its own
cost. The minimum of these costs is called the "edit distance" from str1
to str2.

The particular edit distance implementation given here allows each one of the
operations discussed above to be assigned a cost. Furthermore, one can
assign the following special costs:

"final_tp_cost" is the cost of transposing two adjacent characters, given that
these characters are at no point involved in any other type of operation.

"spec_sub_cost" is the cost of making a character-to-character substitution
that is one of a special list of substitutions defined by spec_sub_from and
spec_sub_to. A substitution is "special" if it takes the i''th character in
spec_sub_from and transforms it to the i''th character in spec_sub_to.
For example, if spec_sub_from="OI" and spec_sub_to="01", then the list
of special substitutions is the list of common character to numeral
substitutions, namely the transformation of an "O" to a "0" and of an "I" to
a "1". Note that the list is directional and case sensitive. So, for example,
the above does not cover "o"-to-"0" or "0"-to-"O" substitutions. If we had
wanted to include these, they would have had to be added to the list
explicitly.

The function makes the following assumptions:
All costs are assumed to be nonnegative.
final_tp_cost <= tp_cost
ins_cost+del_cost <= 2*final_tp_cost
max(sub_cost,special_sub_cost) <= final_tp_cost

When these assumptions are voided, the result may be incorrect.

Note that, even though we use the term "distance", the result is not
necessarily a distance metric. It is only a distance metric if all of the
following conditions hold:
(1) final_tp_cost = tp_cost;
(2) ins_cost = del_cost; and
(3) the spec_sub_from and spec_sub_to lists are symmetric.

The variants of edit_distance_unsafe that accept less parameters are equivalent
to the long-form edit_distance_unsafe, except for the fact that some
operations (such as special substitution) cannot be used. The user can reach
the same effect (although, perhaps with reduced run-time efficiency) by
assigning to these operations sufficiently high costs.

For example, a user can make sure that the only type of transpositions used
are "final" transpositions by assigning to tp_cost the value
len(str1)*del_cost+len(str2)*ins_cost. Because there is always an
insertion-deletion path from str1 to str2 of that cost, assigning this as the
cost for a single transposition ensures that the optimal path from str1 to
str2 can always be found without any use of a non-final transpositon.

Example
=======
SELECT PDLTOOLS_SCHEMA.edit_distance_unsafe(''demerau'',''levenshtein'',1,1,1,
                                           1,1,1,''01OIIL'',''OI01LI'');

 edit_distance_unsafe
----------------------
                    9
(1 row)

See also: edit_distance
' END;
$$;

-------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.edit_distance()
RETURNS VARCHAR
IMMUTABLE
LANGUAGE SQL
AS
$$
SELECT '
edit_distance: an edit distance calculator.

A row function, taking two strings and calculating their edit distance.
Costs for various edit operations, including the transposition of
characters that are adjacent in both the input and output, are user-defined.
This function is "safe" in the sense that it verifies certain qualities
about the user-defined costs and throws an exception
if they do not hold true, rather than returning an erroneous value.

For full usage instructions, run "PDLTOOLS_SCHEMA.edit_distance(''usage'')".
'::VARCHAR;
$$;

-------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.edit_distance(option VARCHAR)
RETURNS VARCHAR
IMMUTABLE
LANGUAGE SQL
AS
$$
SELECT CASE WHEN $1!='usage' THEN PDLTOOLS_SCHEMA.edit_distance() ELSE '
edit_distance: an edit distance calculator.

A row function, taking two strings and calculating their edit distance.
Costs for various edit operations, including the transposition of
characters that are adjacent in both the input and output, are user-defined.
This function is "safe" in the sense that it verifies certain assumptions
about the user-defined costs and throws an exception
if they do not hold true, rather than returning an erroneous value.
See "Usage" for a complete list of these assumptions.

Synopsis
========
PDLTOOLS_SCHEMA.edit_distance(str1 text, str2 text,
           ins_cost integer, del_cost integer, sub_cost integer,
           tp_cost integer, final_tp_cost integer,
           spec_sub_cost integer, spec_sub_from text, spec_sub_to text)
RETURNS integer

PDLTOOLS_SCHEMA.edit_distance(str1 text, str2 text,
           ins_cost integer, del_cost integer, sub_cost integer,
           tp_cost integer, final_tp_cost integer)
RETURNS integer

PDLTOOLS_SCHEMA.edit_distance(str1 text, str2 text,
           ins_cost integer, del_cost integer, sub_cost integer,
           tp_cost integer)
RETURNS integer

str1, str2 - the two strings to be compared. Edits make str1 into str2.
ins_cost - cost to insert a character.
del_cost - cost to delete a character.
sub_cost - cost to substitute a character by another.
tp_cost - cost to transpose two adjacent characters.
final_tp_cost - cost to transpose two adjacent characters, on the assumption
                that no other transformation occurs on these characters or
                anything between them throughout the editing process.
spec_sub_cost - cost for special substitution.
spec_sub_from - string giving the "from" list for substitution of characters
                that receives special weighing spec_sub_cost.
spec_sub_to - string with "to" list corresponding to the previous "from".

Returns the edit distance.

Usage
=====
Given two strings, str1 and str2, it is possible to transform the former into
the latter by a sequence of edit operations such as insertion of a new
character, deletion of an existing character, substitution of one character by
another and transposition of the order of two adjacent characters.

Suppose that each one of these operations is associated with a cost
(in the form of a nonnegative integer), then the cost of a sequence of
operations can be measured as the sum of the costs of its individual parts.

There may be many sequences transforming str1 to str2, each with its own
cost. The minimum of these costs is called the "edit distance" from str1
to str2.

The particular edit distance implementation given here allows each one of the
operations discussed above to be assigned a cost. Furthermore, one can
assign the following special costs:

"final_tp_cost" is the cost of transposing two adjacent characters, given that
these characters are at no point involved in any other type of operation.

"spec_sub_cost" is the cost of making a character-to-character substitution
that is one of a special list of substitutions defined by spec_sub_from and
spec_sub_to. A substitution is "special" if it takes the i''th character in
spec_sub_from and transforms it to the i''th character in spec_sub_to.
For example, if spec_sub_from="OI" and spec_sub_to="01", then the list
of special substitutions is the list of common character to numeral
substitutions, namely the transformation of an "O" to a "0" and of an "I" to
a "1". Note that the list is directional and case sensitive. So, for example,
the above does not cover "o"-to-"0" or "0"-to-"O" substitutions. If we had
wanted to include these, they would have had to be added to the list
explicitly.

The function makes the following assumptions:
All costs are assumed to be nonnegative.
final_tp_cost <= tp_cost
ins_cost+del_cost <= 2*final_tp_cost
max(sub_cost,special_sub_cost) <= final_tp_cost

When these assumptions are voided, an exception is thrown.

Note that, even though we use the term "distance", the result is not
necessarily a distance metric. It is only a distance metric if all of the
following conditions hold:
(1) final_tp_cost = tp_cost;
(2) ins_cost = del_cost; and
(3) the spec_sub_from and spec_sub_to lists are symmetric.

The variants of edit_distance that accept less parameters are equivalent
to the long-form edit_distance, except for the fact that some
operations (such as special substitution) cannot be used. The user can reach
the same effect (although, perhaps with reduced run-time efficiency) by
assigning to these operations sufficiently high costs.

For example, a user can make sure that the only type of transpositions used
are "final" transpositions by assigning to tp_cost the value
len(str1)*del_cost+len(str2)*ins_cost. Because there is always an
insertion-deletion path from str1 to str2 of that cost, assigning this as the
cost for a single transposition ensures that the optimal path from str1 to
str2 can always be found without any use of a non-final transpositon.

Example
=======
SELECT PDLTOOLS_SCHEMA.edit_distance(''demerau'',''levenshtein'',1,1,1,1,1,
                                     1,''01OIIL'',''OI01LI'');

 edit_distance
---------------
             9
(1 row)

See also: edit_distance_unsafe
' END;
$$;

-------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.levenshtein_distance()
RETURNS VARCHAR
IMMUTABLE
LANGUAGE SQL
AS
$$
SELECT '
levenshtein_distance: a Levenshtein distance calculator.

A row function, taking two strings and calculating their Levenshtein distance.

For full usage instructions, run "PDLTOOLS_SCHEMA.levenshtein_distance(''usage'')".
'::VARCHAR;
$$;

-------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.levenshtein_distance(option VARCHAR)
RETURNS VARCHAR
IMMUTABLE
LANGUAGE SQL
AS
$$
SELECT CASE WHEN $1!='usage' THEN PDLTOOLS_SCHEMA.levenshtein_distance() ELSE '
levenshtein_distance: a Levenshtein distance calculator.

A row function, taking two strings and calculating their Levenshtein distance.

Synopsis
========
PDLTOOLS_SCHEMA.levenshtein_distance(str1 text, str2 text)
RETURNS integer

str1, str2 - the two strings to be compared. Edits make str1 into str2.

Returns the Levenshtein distance between the two strings.

Usage
=====
Given two strings, str1 and str2, it is possible to transform the former into
the latter by a sequence of character insertions, deletions and substitutions.

The Levenshtein distance is the minimum number of such edit operations that is
required to make str1 into str2.

Example
=======
SELECT PDLTOOLS_SCHEMA.levenshtein_distance(''demerau'',''levenshtein'');

 levenshtein_distance
----------------------
                    9
(1 row)

See also: demerau_levenshtein_distance, optimal_alignment_distance
' END;
$$;

-------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.demerau_levenshtein_distance()
RETURNS VARCHAR
IMMUTABLE
LANGUAGE SQL
AS
$$
SELECT '
demerau_levenshtein_distance: a Demerau-Levenshtein distance calculator.

A row function, taking two strings and calculating their
Demerau-Levenshtein distance.

For full usage instructions, run
"PDLTOOLS_SCHEMA.demerau_levenshtein_distance(''usage'')".
'::VARCHAR;
$$;

-------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.demerau_levenshtein_distance(option VARCHAR)
RETURNS VARCHAR
IMMUTABLE
LANGUAGE SQL
AS
$$
SELECT CASE WHEN $1!='usage' THEN PDLTOOLS_SCHEMA.demerau_levenshtein_distance() ELSE '
demerau_levenshtein_distance: a Demerau-Levenshtein distance calculator.

A row function, taking two strings and calculating their
Demerau-Levenshtein distance.

Synopsis
========
PDLTOOLS_SCHEMA.demerau_levenshtein_distance(str1 text, str2 text)
RETURNS integer

str1, str2 - the two strings to be compared. Edits make str1 into str2.

Returns the Demerau-Levenshtein distance between the two strings.

Usage
=====
Given two strings, str1 and str2, it is possible to transform the former into
the latter by a sequence of character insertions, deletions, substitutions
and the transposition of pairs of adjacent characters.

The Demerau-Levenshtein distance is the minimum number of such edit operations
that is required to make str1 into str2.

Example
=======
SELECT PDLTOOLS_SCHEMA.demerau_levenshtein_distance(''demerau'',''levenshtein'');

 demerau_levenshtein_distance
------------------------------
                            9
(1 row)

See also: levenshtein_distance, optimal_alignment_distance
' END;
$$;

-------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.optimal_alignment_distance()
RETURNS VARCHAR
IMMUTABLE
LANGUAGE SQL
AS
$$
SELECT '
optimal_alignment_distance: an Optimal Alignment distance calculator.

A row function, taking two strings and calculating their
Optimal Alignment distance.

For full usage instructions, run
"PDLTOOLS_SCHEMA.optimal_alignment_distance(''usage'');".
'::VARCHAR;
$$;

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.optimal_alignment_distance(option VARCHAR)
RETURNS VARCHAR
IMMUTABLE
LANGUAGE SQL
AS
$$
SELECT CASE WHEN $1!='usage' THEN PDLTOOLS_SCHEMA.optimal_alignment_distance() ELSE '
optimal_alignment_distance: an Optimal Alignment distance calculator.

A row function, taking two strings and calculating their
Optimal Alignment distance.

Synopsis
========
PDLTOOLS_SCHEMA.optimal_alignment_distance(str1 text, str2 text)
RETURNS integer

str1, str2 - the two strings to be compared. Edits make str1 into str2.

Returns the Optimal Alignment distance between the two strings.

Usage
=====
Given two strings, str1 and str2, it is possible to transform the former into
the latter by a sequence of character insertions, deletions, substitutions
and the transposition of pairs of adjacent characters, under the restriction
that characters that were once transposed can no longer undergo any further
edit operation.

The Optimal Alignment distance is the minimum number of such edit operations
that is required to make str1 into str2.

Example
=======
SELECT PDLTOOLS_SCHEMA.optimal_alignment_distance(''demerau'',''levenshtein'');

 optimal_alignment_distance
----------------------------
                          9
(1 row)

See also: levenshtein_distance, demerau_levenshtein_distance
' END;
$$;

