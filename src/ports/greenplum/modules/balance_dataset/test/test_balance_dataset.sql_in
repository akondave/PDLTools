------------------------------------------------------------------------------------------------
-- File: test_balance_dataset.sql_in
-- Unit test for balancing datasets module
-------------------------------------------------------------------------------------------------
create table testing_unbalanced
( 
    id int, 
    f1 float, 
    f2 float, 
    f3 float, 
    label text
) distributed by (id);

insert into testing_unbalanced
values
(1, 0.35, 0.52, 0.61, 'a'),
(2, 0.24, 0.51, 0.63, 'a'),
(3, 0.31, 0.49, 0.67, 'a'),
(5, 0.20, 0.35, 0.26, 'b'),
(6, 0.21, 0.36, 0.28, 'b'),
(7, 0.49, 0.70, 0.90, 'c');

SELECT assert(
         PDLTOOLS_SCHEMA.balance_dataset(
                  'testing_unbalanced', 
                  'id',
                  'label',
                  'testing_balanced_dataset'
         ),
         'Balanced dataset created: testing_balanced_dataset'
       );

-- Count the number of records for each class in the balanced dataset
create table balanced_label_counts 
as 
(
    select label, 
           count(distinct id_balanced) 
    from testing_balanced_dataset 
    group by 1
) distributed randomly;

-- If the balancing is correct, every class should have atleast
-- (max_class/2)+1 samples
select assert(sum(ratio),3, 'Assertion test')
from
(
    select label,
           max_class_rec_count/count as ratio
    from balanced_label_counts t1, 
         (
             select max(count) as max_class_rec_count 
             from balanced_label_counts
         ) t2
) bal;

drop table if exists balanced_label_counts;
drop table if exists testing_unbalanced;
drop table if exists testing_balanced_dataset;
